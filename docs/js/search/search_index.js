var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/ApiModule.html",[0,0.952,1,2.192]],["body/modules/ApiModule.html",[0,1.543,1,4.474,2,1.756,3,2.646,4,3.891,5,3.891,6,4.253,7,0.023,8,4.253,9,4.253,10,4.253,11,3.037,12,2.434,13,2.268,14,0.265,15,0.197,16,0.197,17,4.568,18,3.037,19,0.338,20,0.663,21,4.568,22,4.568,23,4.568,24,4.568,25,0.265,26,0.238,27,0.018,28,0.018]],["title/controllers/AppController.html",[29,1.009,30,2.397]],["body/controllers/AppController.html",[7,0.023,14,0.288,15,0.215,16,0.215,19,0.303,20,0.723,25,0.288,26,0.259,27,0.019,28,0.019,29,1.723,30,4.092,31,2.034,32,4.239,33,0.673,34,2.051,35,5.708,36,1.427,37,6.008,38,0.774,39,4.977,40,1.802,41,1.285,42,3.706,43,4.239,44,2.165,45,2.651,46,1.13,47,4.977]],["title/modules/AppModule.html",[0,0.952,48,2.397]],["body/modules/AppModule.html",[0,1.545,1,4.255,2,1.761,3,2.65,7,0.023,11,3.042,12,2.44,13,2.273,14,0.265,15,0.198,16,0.198,18,3.042,19,0.338,20,0.665,25,0.265,26,0.239,27,0.018,28,0.018,30,4.237,31,2.333,42,3.924,43,3.9,48,4.844,49,3.9,50,3.9,51,3.9,52,3.924,53,4.579,54,3.556,55,4.579,56,4.579,57,4.579]],["title/injectables/AppService.html",[42,2.021,58,1.353]],["body/injectables/AppService.html",[7,0.022,14,0.299,15,0.223,16,0.223,19,0.26,20,0.749,25,0.299,26,0.269,27,0.019,28,0.019,33,0.697,34,2.096,35,5.777,38,0.803,40,1.868,41,1.313,42,3.525,46,1.171,58,2.36,59,3.213,60,4.393,61,5.158,62,5.158,63,5.158]],["title/controllers/AuthController.html",[29,1.009,64,2.021]],["body/controllers/AuthController.html",[7,0.023,14,0.247,15,0.185,16,0.185,19,0.304,20,0.62,25,0.247,26,0.314,27,0.017,28,0.017,29,1.225,31,1.745,33,0.577,34,1.865,36,1.225,38,0.664,40,1.547,41,1.358,44,1.858,46,0.97,64,3.137,65,2.909,66,2.909,67,3.637,68,1.83,69,5.463,70,4.271,71,3.954,72,4.271,73,4.271,74,4.271,75,1.745,76,0.97,77,0.909,78,1.458,79,2.621,80,2.66,81,1.745,82,2.947,83,4.119,84,1.858,85,1.745,86,2.181,87,2.275,88,1.642,89,1.458,90,3.402,91,2.91,92,3.22,93,3.22,94,3.22,95,3.22,96,3.22,97,3.22,98,1.225,99,2.909,100,1.375,101,3.22,102,3.22,103,3.22,104,1.298,105,3.22]],["title/modules/AuthModule.html",[0,0.952,6,2.192]],["body/modules/AuthModule.html",[0,1.515,2,1.705,3,2.597,6,4.286,7,0.023,11,2.981,12,2.363,13,2.202,14,0.257,15,0.192,16,0.192,18,2.363,19,0.347,20,0.644,25,0.257,26,0.231,27,0.017,28,0.017,31,2.287,54,3.485,64,3.521,86,2.591,87,2.363,106,3.778,107,3.778,108,3.778,109,4.436,110,4.766,111,4.22,112,2.763,113,2.059,114,1.058,115,1.606,116,4.436,117,2.667,118,3.778,119,2.981,120,3.778,121,4.436]],["title/injectables/AuthService.html",[58,1.353,86,1.274]],["body/injectables/AuthService.html",[7,0.023,14,0.149,15,0.111,16,0.111,19,0.308,20,0.375,25,0.149,26,0.134,27,0.012,28,0.012,33,0.349,34,1.314,38,0.923,40,1.978,41,1.5,46,1.24,58,1.48,59,1.606,68,2.039,75,2.341,76,1.301,77,0.987,78,1.956,80,1.606,86,1.394,88,1.48,89,2.2,91,2.051,98,1.788,99,3.136,100,2.044,104,1.854,113,1.197,114,0.488,115,0.934,117,1.675,118,2.197,119,2.051,120,2.197,122,2.197,123,1.314,124,4.604,125,4.604,126,3.849,127,4.604,128,3.849,129,3.322,130,4.604,131,3.849,132,2.397,133,2.197,134,3.179,135,4.604,136,3.409,137,4.604,138,2.579,139,3.278,140,3.849,141,2.579,142,2.579,143,2.579,144,2.91,145,2.209,146,3.849,147,2.579,148,2.579,149,5.461,150,2.579,151,3.849,152,2.579,153,1.606,154,1.606,155,2.197,156,3.278,157,2.579,158,1.481,159,2.621,160,1.945,161,2.579,162,2.197,163,2.579,164,0.881,165,2.197,166,2.579,167,2.579,168,1.945,169,3.849,170,3.849,171,2.535,172,1.463,173,2.197,174,2.579,175,2.579,176,2.579,177,2.579,178,2.579,179,2.579,180,2.197,181,2.579,182,2.579,183,1.945,184,2.579,185,3.849,186,2.579,187,2.579,188,2.579,189,2.579,190,2.579,191,2.579,192,3.849,193,2.579,194,2.579,195,1.054,196,2.579,197,1.911,198,2.579,199,2.579,200,2.579,201,2.579,202,2.579,203,1.054]],["title/controllers/HashtagsController.html",[29,1.009,204,2.397]],["body/controllers/HashtagsController.html",[7,0.023,14,0.261,15,0.194,16,0.194,19,0.311,20,0.82,25,0.261,26,0.234,27,0.018,28,0.018,29,1.291,31,1.839,33,0.609,34,1.928,36,1.62,38,0.879,40,2.045,41,1.384,46,1.282,66,3.065,75,1.839,76,1.022,78,1.537,84,1.958,85,1.839,204,3.846,205,3.833,206,2.804,207,6.472,208,5.648,209,4.501,210,4.501,211,5.648,212,4.501,213,6.172,214,2.398,215,4.501,216,4.501,217,3.244,218,4.81,219,4.81,220,5.648,221,4.501,222,4.501,223,3.833,224,3.065,225,3.833]],["title/modules/HashtagsModule.html",[0,0.952,8,2.192]],["body/modules/HashtagsModule.html",[0,1.687,2,2.035,7,0.022,8,3.881,14,0.306,15,0.229,16,0.229,19,0.315,20,0.769,25,0.306,26,0.276,27,0.019,28,0.019,31,2.547,204,4.512,226,5.292,227,5.292]],["title/classes/LoginRequestBody.html",[26,0.183,71,2.192]],["body/classes/LoginRequestBody.html",[7,0.023,14,0.25,15,0.186,16,0.186,19,0.305,20,0.626,25,0.25,26,0.315,27,0.017,28,0.017,29,1.236,33,0.583,36,1.576,38,0.855,41,1.439,44,1.876,46,0.979,64,2.476,65,2.936,68,1.31,71,3.768,77,1.006,79,2.391,81,1.762,82,3.123,83,4.144,84,1.876,85,1.762,86,2.191,87,2.297,88,2.326,89,2.065,90,3.423,91,2.928,92,3.25,93,3.25,94,3.25,95,3.25,96,3.25,97,3.25,98,1.236,99,2.936,100,1.388,101,3.25,102,3.25,103,3.25,104,1.31,105,3.25,123,1.876,228,1.101,229,4.311,230,4.311]],["title/classes/LoginResponseBody.html",[26,0.183,90,2.192]],["body/classes/LoginResponseBody.html",[7,0.023,14,0.248,15,0.185,16,0.185,19,0.305,20,0.623,25,0.248,26,0.315,27,0.017,28,0.017,29,1.231,33,0.58,36,1.231,38,0.853,41,1.461,44,1.867,46,0.974,64,2.464,65,2.922,68,1.304,71,3.412,75,1.754,76,0.974,77,1.004,78,1.465,79,2.384,81,1.754,82,3.05,83,4.131,84,1.867,85,1.754,86,2.186,87,2.286,88,1.65,89,1.465,90,3.76,91,3.501,92,4.131,93,3.235,94,3.235,95,3.235,96,3.235,97,3.235,98,1.231,99,2.922,100,1.382,101,3.235,102,3.235,103,3.235,104,1.304,105,3.235,123,1.871,132,2.672,228,1.096,231,5.479]],["title/classes/Mention.html",[26,0.183,232,2.397]],["body/classes/Mention.html",[7,0.023,14,0.236,15,0.176,16,0.176,19,0.297,25,0.236,26,0.276,27,0.016,28,0.016,33,0.551,38,0.824,41,1.382,76,1.553,77,0.881,114,1.114,115,1.475,123,1.809,153,3.299,154,4.026,164,1.39,195,2.406,203,1.664,206,2.021,228,1.04,232,3.608,233,3.07,234,4.072,235,4.072,236,2.459,237,2.339,238,3.884,239,2.021,240,3.884,241,3.608,242,4.01,243,3.468,244,2.341,245,1.475,246,3.07,247,3.07,248,2.773,249,2.169,250,5.015,251,3.468,252,5.015,253,3.468,254,2.021,255,3.468,256,3.042,257,3.468,258,3.468,259,3.468,260,2.773,261,3.468,262,3.07,263,3.468,264,2.773]],["title/modules/MockPostsModule.html",[0,0.952,265,2.397]],["body/modules/MockPostsModule.html",[0,1.529,2,1.731,3,2.621,7,0.023,11,3.009,12,2.398,13,2.234,14,0.261,15,0.194,16,0.194,19,0.327,20,0.654,25,0.261,26,0.234,27,0.018,28,0.018,54,3.517,86,2.596,110,4.81,265,4.755,266,3.833,267,4.501,268,3.833,269,2.528,270,4.501,271,2.398,272,3.833,273,4.654,274,4.654,275,4.654,276,4.654,277,4.501]],["title/classes/MockPostsRepository.html",[26,0.183,278,2.397]],["body/classes/MockPostsRepository.html",[7,0.022,14,0.308,15,0.23,16,0.23,19,0.316,25,0.308,26,0.277,27,0.019,28,0.019,136,3.814,164,1.817,228,1.359,244,1.928,245,2.265,278,4.259,279,4.533,280,4.013]],["title/classes/MockUsersRepository.html",[26,0.183,281,2.397]],["body/classes/MockUsersRepository.html",[7,0.023,14,0.264,15,0.197,16,0.197,19,0.313,25,0.264,26,0.237,27,0.018,28,0.018,33,0.616,34,1.943,38,0.709,40,1.65,46,1.035,68,1.886,76,1.035,80,2.838,88,1.752,98,1.307,104,1.886,114,1.076,115,1.65,117,2.476,136,3.565,164,1.556,183,3.436,195,1.862,203,1.862,228,1.164,245,2.061,281,3.876,282,3.881,283,6.501,284,4.557,285,2.838,286,5.691,287,3.881,288,4.557,289,4.557,290,4.557,291,3.881,292,3.032,293,3.881,294,2.428,295,5.691,296,6.501,297,2.428,298,4.557,299,3.881]],["title/classes/MooBaseEntity.html",[26,0.183,236,1.633]],["body/classes/MooBaseEntity.html",[7,0.023,14,0.263,15,0.196,16,0.196,19,0.229,25,0.263,26,0.237,27,0.018,28,0.018,33,0.615,36,1.778,38,0.965,41,1.215,76,1.29,77,1.031,123,1.94,164,1.552,195,2.534,228,1.161,236,2.638,239,2.821,294,3.303,297,3.303,300,3.871,301,2.831,302,5.683,303,4.84,304,3.87,305,4.84,306,3.46,307,2.611,308,3.264,309,4.545,310,3.264,311,4.545,312,2.611,313,3.264,314,4.545,315,5.683,316,4.545,317,5.683,318,4.545]],["title/guards/OptionalAuthGuard.html",[319,2.653,320,2.192]],["body/guards/OptionalAuthGuard.html",[7,0.023,14,0.227,15,0.169,16,0.169,19,0.261,20,0.569,25,0.299,26,0.301,27,0.016,28,0.016,33,0.529,34,1.763,38,0.609,40,1.418,45,2.086,46,1.395,58,2.221,68,1.94,75,1.6,76,0.889,77,0.651,78,1.337,86,2.092,87,2.086,91,3.078,98,1.657,100,1.261,104,1.756,129,2.086,145,2.224,159,2.667,171,2.681,172,1.319,203,2.11,245,2.092,269,1.418,292,2.086,320,3.216,321,2.952,322,2.667,323,3.825,324,4.814,325,4.356,326,4.465,327,3.916,328,2.667,329,2.952,330,2.952,331,2.952,332,2.952,333,2.667,334,2.952,335,2.952,336,3.893,337,3.517,338,3.893,339,2.952,340,2.952,341,2.952,342,2.952,343,2.667,344,3.893,345,2.952,346,3.893,347,2.952,348,2.667]],["title/classes/PasswordEntity.html",[26,0.183,117,1.531]],["body/classes/PasswordEntity.html",[7,0.023,14,0.238,15,0.178,16,0.178,19,0.299,25,0.238,26,0.215,27,0.017,28,0.017,33,0.557,36,1.906,38,1.034,41,1.387,76,0.935,77,1.106,89,2.021,114,1.184,115,1.491,117,2.322,123,1.822,144,3.336,164,1.406,172,1.512,195,2.181,228,1.052,236,3.085,237,2.365,238,3.9,239,2.044,240,3.323,242,3.634,245,1.932,248,2.804,294,2.843,297,2.843,306,2.843,307,2.365,308,2.365,310,2.365,312,2.365,313,2.365,349,3.507,350,3.507,351,4.545,352,4.118,353,3.105,354,4.118,355,4.118,356,4.118,357,3.687,358,2.564,359,2.564,360,2.564,361,4.118]],["title/classes/PostCreateRequestBody.html",[26,0.183,362,2.192]],["body/classes/PostCreateRequestBody.html",[7,0.023,14,0.197,15,0.147,16,0.147,19,0.332,20,0.683,25,0.197,26,0.28,27,0.015,28,0.015,29,0.977,33,0.461,36,1.544,38,0.837,41,1.471,44,1.482,45,1.815,46,1.429,68,1.913,77,0.895,79,2.045,81,2.572,82,2.498,84,1.482,85,1.392,98,0.977,100,1.733,114,0.889,115,1.234,123,1.605,145,2.279,172,1.201,206,1.691,214,1.815,217,1.957,228,0.87,244,1.234,249,2.867,254,2.334,269,1.234,271,1.815,362,3.352,363,2.321,364,3.666,365,3.666,366,3.704,367,3.407,368,3.407,369,3.407,370,2.182,371,1.815,372,4.058,373,1.957,374,3.496,375,1.957,376,1.957,377,2.672,378,2.321,379,2.928,380,2.321,381,2.569,382,2.569,383,1.957,384,2.321,385,2.569,386,2.569,387,2.569,388,4.956,389,2.569,390,3.332,391,2.569,392,3.545,393,2.569,394,2.569,395,2.569,396,2.569,397,2.569,398,2.569,399,2.569,400,2.569,401,2.569,402,2.569,403,2.569]],["title/classes/PostDetailsQueryParams.html",[26,0.183,379,2.192]],["body/classes/PostDetailsQueryParams.html",[7,0.023,14,0.201,15,0.15,16,0.15,19,0.333,20,0.692,25,0.201,26,0.283,27,0.015,28,0.015,29,0.996,33,0.469,36,1.366,38,0.741,41,1.463,44,1.51,45,1.85,46,1.437,68,1.924,77,0.792,79,2.072,81,2.587,82,2.21,84,1.51,85,1.419,98,0.996,100,1.75,114,0.901,115,1.257,123,1.626,145,2.292,172,1.216,206,2.698,214,1.85,217,1.994,228,0.887,244,1.257,249,1.85,254,2.364,269,1.257,271,1.85,362,2.966,363,2.364,364,2.364,365,2.364,366,3.723,370,2.21,371,1.85,372,4.098,373,1.994,374,3.52,375,1.994,376,1.994,377,2.698,378,2.364,379,3.385,380,3.702,381,2.618,382,2.618,383,1.994,384,2.364,385,2.618,386,2.618,387,2.618,388,4.978,389,2.618,390,3.359,391,2.618,392,3.591,393,2.618,394,2.618,395,2.618,396,2.618,397,2.618,398,2.618,399,2.618,400,2.618,401,2.618,402,2.618,403,2.618,404,3.472,405,3.472]],["title/classes/PostEntity.html",[26,0.183,244,1.274]],["body/classes/PostEntity.html",[7,0.023,14,0.182,15,0.136,16,0.136,19,0.26,25,0.182,26,0.231,27,0.014,28,0.014,33,0.424,36,1.944,38,1.055,41,1.263,76,1.392,77,1.128,114,1.059,115,1.137,123,1.516,153,3.487,154,4.135,164,1.072,195,2.105,203,1.814,206,2.557,228,0.802,232,2.138,233,2.367,236,2.847,237,1.803,238,3.487,239,1.558,240,3.487,241,3.024,242,3.508,243,2.674,244,2.332,245,1.608,246,2.367,247,3.348,248,3.024,249,2.744,250,5.223,251,4.387,252,5.223,253,3.781,254,2.557,255,3.781,256,3.216,257,4.387,258,3.781,259,4.387,260,3.508,261,3.781,262,3.884,263,3.781,264,3.508,294,2.365,297,2.365,306,2.365,307,1.803,308,1.803,310,1.803,312,1.803,313,1.803,357,3.208,358,1.955,359,1.955,360,1.955,406,3.139,407,3.139,408,4.387,409,3.139,410,3.139,411,3.781,412,3.139,413,3.139,414,4.44,415,3.139,416,3.139,417,3.139,418,2.674,419,3.139]],["title/controllers/PostsController.html",[29,1.009,383,2.021]],["body/controllers/PostsController.html",[7,0.023,14,0.166,15,0.124,16,0.124,19,0.317,20,0.605,25,0.166,26,0.255,27,0.013,28,0.013,29,0.823,31,1.173,33,0.388,34,1.421,36,1.707,38,0.926,40,2.155,41,1.478,44,1.249,45,1.529,46,1.351,66,1.954,68,2.111,75,2.432,76,1.351,77,0.99,78,2.032,79,1.811,81,2.57,82,1.932,84,1.249,85,1.173,98,0.823,100,1.578,114,1.016,115,1.039,145,2.414,172,1.063,206,1.425,214,1.529,217,1.648,224,1.954,244,1.039,249,1.529,254,2.432,269,1.039,271,1.529,362,3.347,363,1.954,364,1.954,365,1.954,366,3.277,370,1.932,371,1.529,372,4.052,373,1.648,374,3.277,375,1.648,376,1.648,377,2.432,378,1.954,379,3.347,380,1.954,381,2.164,382,2.164,383,2.391,384,3.336,385,2.164,386,3.139,387,2.164,388,5.027,389,2.164,390,3.086,391,3.694,392,3.139,393,2.164,394,2.164,395,2.164,396,2.164,397,2.164,398,2.164,399,2.164,400,2.164,401,2.164,402,2.164,403,2.164,420,3.546,421,4.163,422,4.163,423,4.163,424,2.87,425,2.87,426,2.87,427,2.87,428,2.87,429,2.87,430,2.87,431,2.87,432,2.87,433,2.87,434,2.87,435,2.87,436,2.87,437,2.87,438,2.87,439,2.87]],["title/modules/PostsModule.html",[0,0.952,9,2.192]],["body/modules/PostsModule.html",[0,1.587,2,1.839,3,2.722,7,0.023,9,4.301,11,3.124,12,2.548,13,2.374,14,0.277,15,0.207,16,0.207,18,2.548,19,0.342,20,0.694,25,0.277,26,0.249,27,0.018,28,0.018,31,2.397,54,3.652,112,2.978,113,2.22,244,1.732,376,2.747,377,3.428,378,3.257,383,3.642,440,4.073,441,4.073,442,4.782,443,4.782,444,4.782]],["title/classes/PostsRepository.html",[26,0.183,445,2.397]],["body/classes/PostsRepository.html",[7,0.022,14,0.306,15,0.229,16,0.229,19,0.315,25,0.306,26,0.276,27,0.019,28,0.019,136,3.804,164,1.807,228,1.352,244,1.916,245,2.257,376,3.039,445,4.244,446,4.507,447,4.507,448,5.292]],["title/injectables/PostsService.html",[58,1.353,377,1.747]],["body/injectables/PostsService.html",[7,0.023,14,0.15,15,0.112,16,0.112,19,0.276,20,0.377,25,0.15,26,0.135,27,0.012,28,0.012,33,0.351,34,1.319,38,0.852,40,1.854,41,1.464,46,1.162,58,1.486,59,1.616,68,1.985,75,2.237,76,1.243,77,0.911,78,1.869,81,2.552,98,1.646,100,1.649,104,1.664,113,1.204,114,0.968,115,0.939,129,1.382,132,2.407,145,2.213,158,1.49,160,1.956,171,2.376,172,0.662,195,2.237,197,1.919,206,2.718,217,3.144,224,1.767,225,3.292,244,1.4,249,1.382,254,2.85,256,1.49,260,1.767,262,4.128,264,3.728,292,1.382,301,3.188,304,1.767,364,3.909,365,3.728,370,1.204,376,1.49,377,1.919,380,3.728,384,3.146,420,3.292,445,3.909,449,2.209,450,4.62,451,3.865,452,2.594,453,2.594,454,2.594,455,3.934,456,2.594,457,3.865,458,2.594,459,2.594,460,3.934,461,2.594,462,3.865,463,3.865,464,2.594,465,2.209,466,2.594,467,2.594,468,2.914,469,2.209,470,2.594,471,2.594,472,2.209,473,2.209,474,2.209,475,3.865,476,2.594,477,2.594,478,2.594,479,2.594,480,2.594,481,2.594,482,2.594,483,2.594,484,2.594,485,2.594,486,2.594,487,2.594,488,2.594,489,2.594,490,2.594,491,2.594,492,2.594,493,2.594,494,2.594,495,2.594,496,2.594,497,2.594,498,2.594,499,2.594,500,2.594,501,2.914,502,2.594,503,2.594,504,3.865,505,3.865,506,2.209,507,3.292,508,2.209,509,2.594,510,2.594,511,2.594,512,2.594,513,3.865,514,2.594,515,2.594,516,2.594,517,3.865,518,2.594]],["title/modules/ProdDbModule.html",[0,0.952,52,2.021]],["body/modules/ProdDbModule.html",[0,1.794,2,1.566,7,0.023,14,0.236,15,0.176,16,0.176,18,2.822,19,0.341,20,0.591,25,0.307,26,0.276,27,0.016,28,0.016,52,3.042,77,0.881,88,2.037,89,1.809,111,4.44,112,2.536,113,1.89,114,1.114,115,1.475,117,2.562,119,3.137,203,2.406,244,2.132,280,3.07,285,2.536,301,2.536,304,3.608,519,3.468,520,4.875,521,3.994,522,3.468,523,3.137,524,2.773,525,2.773,526,4.512,527,4.512,528,3.994,529,3.994,530,3.07,531,4.512,532,4.512,533,4.512,534,4.512,535,4.512,536,3.468,537,3.07,538,3.468,539,3.468,540,2.773]],["title/guards/RequiredAuthGuard.html",[269,1.274,319,2.653]],["body/guards/RequiredAuthGuard.html",[7,0.023,14,0.227,15,0.169,16,0.169,19,0.261,20,0.569,25,0.299,26,0.301,27,0.016,28,0.016,33,0.529,34,1.763,38,0.609,40,1.418,45,2.086,46,1.395,58,2.221,68,1.94,75,1.6,76,0.889,77,0.651,78,1.337,86,2.092,87,2.086,91,3.078,98,1.657,100,1.261,104,1.756,129,2.086,145,2.224,159,2.667,171,2.681,172,1.319,203,2.11,245,2.092,269,1.87,292,2.086,320,2.439,321,2.952,322,2.667,323,3.825,324,4.814,325,4.356,326,4.465,328,2.667,329,2.952,330,2.952,331,2.952,332,2.952,333,2.667,334,2.952,335,2.952,336,3.893,337,3.517,338,3.893,339,2.952,340,2.952,341,2.952,342,2.952,343,2.667,344,3.893,345,2.952,346,3.893,347,2.952,348,2.667,541,3.916]],["title/classes/SessionsEntity.html",[26,0.183,119,1.875]],["body/classes/SessionsEntity.html",[7,0.023,14,0.244,15,0.182,16,0.182,19,0.302,25,0.244,26,0.22,27,0.017,28,0.017,33,0.571,36,1.875,38,1.017,41,1.281,76,0.958,77,1.088,114,1.026,115,1.529,119,2.889,123,1.851,144,3.368,145,1.964,164,1.441,172,1.53,195,2.216,203,2.216,228,1.078,236,3.106,237,2.425,238,3.731,239,2.096,240,3.377,241,3.693,245,1.964,294,2.889,297,2.889,306,2.889,307,2.425,308,2.425,310,2.425,312,2.425,313,2.425,353,3.183,357,3.731,358,2.629,359,2.629,360,2.629,542,3.596,543,4.222,544,4.618,545,4.222,546,4.222,547,4.222]],["title/modules/TestDbModule.html",[0,0.952,540,2.397]],["body/modules/TestDbModule.html",[0,1.793,2,1.562,7,0.023,14,0.235,15,0.176,16,0.176,18,2.818,19,0.34,20,0.59,25,0.306,26,0.276,27,0.016,28,0.016,52,2.333,77,0.88,88,2.034,89,1.806,111,4.435,112,2.53,113,1.886,114,1.112,115,1.471,117,2.559,119,3.134,203,2.404,244,2.13,280,3.064,285,2.53,301,2.53,304,3.603,519,3.46,520,4.871,521,3.064,522,3.46,523,3.134,524,2.767,525,2.767,526,4.505,527,4.505,528,3.989,529,3.989,530,3.064,531,4.505,532,4.505,533,4.505,534,4.505,535,4.505,536,4.505,537,3.989,538,3.46,539,3.46,540,3.603]],["title/classes/TokenAuthorizer.html",[26,0.183,323,2.192]],["body/classes/TokenAuthorizer.html",[7,0.023,14,0.221,15,0.165,16,0.165,19,0.256,20,0.554,25,0.294,26,0.297,27,0.016,28,0.016,33,0.516,34,1.734,38,0.79,40,1.383,45,2.034,46,1.381,58,2.194,68,1.924,75,2.075,76,1.153,77,0.845,78,1.734,86,2.357,87,2.034,91,3.04,98,1.636,100,1.23,104,1.734,129,2.034,132,2.378,145,2.202,159,2.6,171,2.648,172,1.297,203,2.075,228,0.975,245,1.839,269,1.383,292,2.034,320,2.378,322,2.6,323,3.787,324,4.302,325,3.829,326,4.434,328,2.6,329,2.879,330,2.879,331,4.302,332,3.829,333,2.6,334,2.879,335,2.879,336,3.829,337,3.458,338,3.829,339,2.879,340,2.879,341,2.879,342,2.879,343,2.6,344,3.829,345,2.879,346,3.829,347,2.879,348,2.6,548,5.078,549,3.818,550,3.818,551,3.818]],["title/classes/UserCreateRequestBody.html",[26,0.183,552,2.192]],["body/classes/UserCreateRequestBody.html",[7,0.023,14,0.164,15,0.122,16,0.122,19,0.308,20,0.598,25,0.164,26,0.253,27,0.013,28,0.013,29,0.81,33,0.382,36,1.626,38,0.882,41,1.489,44,1.229,46,1.422,68,1.903,76,1.211,77,0.943,78,2.021,79,2.113,81,1.682,82,2.632,84,1.229,85,1.155,88,2.051,89,1.821,98,1.698,100,1.906,104,1.476,114,1.009,123,1.405,144,2.587,145,2.268,158,1.623,171,2.254,172,1.74,197,2.043,214,1.505,228,0.722,269,1.023,271,1.505,366,3.775,370,1.311,371,1.505,373,1.623,374,3.399,375,1.623,390,3.257,552,3.024,553,1.924,554,3.633,555,3.633,556,2.825,557,2.825,558,2.825,559,2.825,560,2.825,561,2.13,562,1.924,563,2.13,564,1.505,565,2.043,566,1.924,567,2.564,568,2.13,569,2.13,570,1.623,571,2.13,572,2.13,573,2.13,574,2.13,575,2.803,576,2.13,577,2.13,578,2.13,579,2.13,580,3.104,581,2.13,582,2.13,583,2.13,584,2.13,585,2.13,586,3.661,587,3.104,588,2.13,589,2.13,590,2.13,591,1.76,592,2.13,593,2.13,594,2.13,595,3.323,596,3.633,597,3.104,598,2.13,599,2.13,600,2.13,601,3.104,602,2.13,603,2.13,604,2.13,605,2.13,606,2.13]],["title/classes/UserEntity.html",[26,0.183,114,0.666]],["body/classes/UserEntity.html",[7,0.023,14,0.186,15,0.138,16,0.138,19,0.263,25,0.186,26,0.167,27,0.014,28,0.014,33,0.433,36,1.934,38,1.049,41,1.407,76,1.352,77,1.121,78,1.929,88,2.003,89,1.094,114,0.852,117,2.459,123,1.538,153,3.519,154,3.845,164,1.094,183,3.928,195,1.841,203,2.781,228,0.819,236,2.866,237,1.841,238,3.95,239,1.591,242,2.183,245,1.631,246,4.489,247,3.397,248,4.055,256,3.245,285,1.996,291,4.437,293,4.437,294,2.4,297,2.4,299,4.437,306,2.4,307,1.841,308,1.841,310,1.841,312,1.841,313,1.841,350,4.437,351,4.813,357,3.244,358,1.996,359,1.996,360,1.996,408,2.73,411,3.837,418,2.73,544,3.837,554,3.548,555,3.548,607,2.73,608,3.205,609,3.205,610,4.505,611,3.205,612,4.505,613,3.205,614,4.505,615,3.205,616,3.837,617,3.837,618,3.205,619,3.205,620,4.505,621,3.205,622,4.505,623,4.505,624,3.205,625,3.205,626,3.205,627,3.205]],["title/classes/UserFollowingEntity.html",[26,0.183,523,1.875]],["body/classes/UserFollowingEntity.html",[7,0.023,14,0.238,15,0.178,16,0.178,19,0.298,25,0.238,26,0.214,27,0.017,28,0.017,33,0.555,36,1.859,38,1.009,41,0.879,76,1.21,77,1.078,114,1.279,123,1.819,164,1.403,195,2.178,228,1.049,236,3.083,237,2.359,239,2.04,240,3.683,241,4.027,245,1.93,292,2.189,294,2.839,297,2.839,306,2.839,307,2.359,308,2.359,310,2.359,312,2.359,313,2.359,353,4.018,357,3.683,358,2.559,359,2.559,360,2.559,523,2.839,524,4.027,564,2.189,595,3.897,617,3.499,628,3.499,629,5.329,630,4.108,631,4.108,632,4.108,633,4.108,634,4.108,635,3.499,636,4.108,637,4.108,638,4.108,639,4.108,640,4.108]],["title/classes/UserUpdateRequestBody.html",[26,0.183,567,2.192]],["body/classes/UserUpdateRequestBody.html",[7,0.023,14,0.166,15,0.124,16,0.124,19,0.31,20,0.603,25,0.166,26,0.255,27,0.013,28,0.013,29,0.82,33,0.387,36,1.539,38,0.835,41,1.485,44,1.245,46,1.427,68,1.909,76,1.218,77,0.893,78,2.145,79,2.128,81,1.697,82,2.27,84,1.245,85,1.169,88,1.597,89,1.832,98,1.705,100,1.914,104,1.486,114,1.015,123,1.418,144,2.605,145,2.275,158,1.643,171,2.27,172,1.744,197,2.062,214,1.524,228,0.731,269,1.036,271,1.524,366,3.826,370,1.328,371,1.524,373,1.643,374,3.414,375,1.643,390,3.273,552,2.587,553,1.948,554,3.655,555,3.655,561,2.157,562,1.948,563,2.157,564,1.524,565,2.062,566,1.948,567,3.046,568,2.157,569,2.157,570,1.643,571,2.157,572,2.157,573,2.157,574,2.157,575,2.829,576,2.157,577,2.157,578,2.157,579,2.157,580,3.132,581,2.157,582,2.157,583,2.157,584,2.157,585,2.157,586,3.687,587,3.132,588,2.157,589,2.157,590,2.157,591,1.782,592,2.157,593,2.157,594,2.157,595,3.342,596,3.655,597,3.132,598,2.157,599,2.157,600,2.157,601,3.132,602,2.157,603,2.157,604,2.157,605,2.157,606,2.157,641,2.861,642,2.861,643,2.861,644,2.861]],["title/controllers/UsersController.html",[29,1.009,570,2.021]],["body/controllers/UsersController.html",[7,0.023,14,0.139,15,0.104,16,0.104,19,0.293,20,0.53,25,0.139,26,0.23,27,0.011,28,0.011,29,0.689,31,0.982,33,0.325,34,1.246,36,1.713,38,0.929,40,2.163,41,1.487,44,1.046,46,1.356,66,1.637,68,2.113,75,2.279,76,1.356,77,0.928,78,1.904,79,1.92,81,1.803,82,2.048,84,1.046,85,0.982,88,1.696,89,1.246,98,1.6,100,1.796,104,1.341,114,1.179,144,2.971,145,2.419,158,1.381,171,2.048,172,1.693,197,1.812,214,1.281,269,0.871,271,1.281,366,3.43,370,1.116,371,1.281,373,1.381,374,3.203,375,1.381,390,3.043,552,3.069,553,1.637,554,2.486,555,2.486,561,1.813,562,1.637,563,1.813,564,1.281,565,1.812,566,1.637,567,3.069,568,1.813,569,1.813,570,2.096,571,1.813,572,2.752,573,1.813,574,1.813,575,2.486,576,2.752,577,1.813,578,1.813,579,3.327,580,3.327,581,1.813,582,1.813,583,1.813,584,3.327,585,2.752,586,3.327,587,3.715,588,1.813,589,1.813,590,1.813,591,1.497,592,1.813,593,1.813,594,3.327,595,3.474,596,4.067,597,2.752,598,1.813,599,1.813,600,3.327,601,2.752,602,1.813,603,1.813,604,3.715,605,1.813,606,3.715,645,1.813,646,3.109,647,3.109,648,2.404,649,2.404,650,2.404,651,2.404,652,2.404,653,2.404,654,2.404,655,2.404,656,2.404,657,2.047,658,2.404,659,2.047,660,2.404,661,2.404,662,2.404,663,2.404,664,2.404,665,2.404,666,2.404]],["title/modules/UsersModule.html",[0,0.952,10,2.192]],["body/modules/UsersModule.html",[0,1.55,2,1.77,3,2.658,7,0.023,10,4.261,11,3.051,12,2.452,13,2.285,14,0.267,15,0.199,16,0.199,18,2.452,19,0.35,20,0.668,25,0.267,26,0.24,27,0.018,28,0.018,31,2.34,54,3.567,112,2.866,113,2.136,114,0.87,117,2.492,172,1.175,285,2.866,523,3.051,525,3.135,564,2.452,565,3.396,566,3.135,570,3.581,667,3.92,668,3.92,669,4.602,670,4.602,671,4.602]],["title/classes/UsersRepository.html",[26,0.183,134,2.192]],["body/classes/UsersRepository.html",[7,0.022,14,0.306,15,0.229,16,0.229,19,0.315,25,0.306,26,0.276,27,0.019,28,0.019,114,1.001,134,3.881,136,3.804,164,1.807,228,1.352,245,2.257,447,4.507,564,2.819,672,4.507,673,5.292]],["title/injectables/UsersService.html",[58,1.353,565,1.747]],["body/injectables/UsersService.html",[7,0.023,14,0.134,15,0.1,16,0.1,19,0.289,20,0.337,25,0.134,26,0.121,27,0.011,28,0.011,33,0.314,34,1.214,38,0.891,40,2.193,41,1.44,46,1.249,58,1.367,59,1.446,68,2.046,75,2.34,76,1.3,77,0.953,78,1.955,80,2.214,86,2.074,88,1.661,89,1.474,98,1.496,100,1.95,104,1.471,113,1.078,114,1.083,129,2.301,132,2.214,133,1.977,134,3.014,136,2.779,139,3.027,144,2.931,145,2.276,158,1.333,160,1.751,164,0.793,165,1.977,168,5.076,171,2.005,172,1.755,180,3.678,195,1.453,197,2.843,217,1.333,223,3.027,272,1.977,301,2.69,370,1.65,455,4.686,460,1.977,465,1.977,468,2.68,501,3.257,523,1.237,525,1.581,564,1.237,565,1.765,575,2.421,591,1.446,595,3.427,596,3.747,629,4.877,646,3.027,647,3.027,657,3.027,659,3.027,674,1.977,675,4.319,676,4.319,677,4.319,678,4.319,679,4.319,680,2.322,681,2.322,682,2.322,683,3.555,684,2.322,685,2.322,686,5.031,687,4.839,688,2.322,689,2.322,690,2.322,691,2.322,692,2.322,693,4.319,694,2.322,695,3.555,696,2.322,697,2.322,698,2.322,699,3.678,700,2.322,701,3.555,702,3.555,703,2.322,704,3.555,705,2.322,706,3.555,707,2.322,708,2.322,709,3.555,710,2.322,711,2.322,712,2.322,713,2.322,714,2.322,715,1.977,716,2.322,717,2.322,718,2.322,719,1.977]],["title/coverage.html",[720,3.273]],["body/coverage.html",[7,0.023,16,0.145,26,0.369,27,0.014,28,0.014,29,1.737,30,2.287,32,2.859,42,1.928,58,2.217,60,2.859,64,1.928,65,3.637,71,2.091,77,0.558,86,1.216,90,2.091,104,1.02,114,0.635,117,1.461,119,1.789,122,2.859,134,2.091,172,0.857,204,2.287,205,2.859,232,2.287,233,3.509,236,1.558,244,1.216,256,4.197,269,1.216,273,2.532,274,2.532,275,2.532,276,2.532,278,2.287,279,2.859,281,2.287,282,2.859,300,2.859,319,3.509,320,2.091,322,3.637,323,2.091,349,2.859,362,2.091,363,3.637,377,1.667,379,2.091,383,1.928,445,2.287,446,2.859,449,2.859,523,1.789,524,2.287,542,2.859,552,2.091,553,3.637,565,1.667,567,2.091,570,1.928,607,2.859,628,2.859,672,2.859,674,2.859,720,2.287,721,3.357,722,3.357,723,3.357,724,6.265,725,6.265,726,2.859,727,6.265,728,6.732,729,3.357,730,4.653,731,5.766,732,4.653,733,3.357,734,5.158,735,2.859,736,2.859,737,3.357,738,2.859,739,3.357,740,3.357,741,3.357,742,3.357,743,3.357,744,3.357,745,3.357,746,3.357]],["title/dependencies.html",[3,1.965,747,2.937]],["body/dependencies.html",[3,2.31,7,0.023,20,0.723,27,0.019,28,0.019,85,2.034,113,2.31,162,4.239,164,1.699,748,6.454,749,4.977,750,4.977,751,6.454,752,4.977,753,4.977,754,4.977,755,4.977,756,4.977,757,4.977,758,4.977,759,6.008,760,4.977,761,4.977,762,4.977,763,4.977,764,4.977,765,4.977,766,4.977,767,4.977,768,4.977,769,4.977,770,4.977]],["title/miscellaneous/functions.html",[771,2,772,3.605]],["body/miscellaneous/functions.html",[7,0.02,27,0.02,28,0.02,33,0.755,736,4.754,738,5.767,771,3.801,772,4.754,773,5.581]],["title/index.html",[33,0.397,774,2.501,775,2.501]],["body/index.html",[7,0.023,15,0.153,27,0.015,28,0.015,67,3.008,81,2.601,89,1.206,172,0.902,197,1.753,206,2.722,224,4.012,249,1.882,254,1.753,260,2.405,264,2.405,287,4.104,370,2.545,371,2.567,474,4.671,501,3.633,507,3.008,508,3.008,520,4.135,521,2.663,528,2.663,529,2.663,530,3.633,562,2.405,645,4.135,720,2.405,776,5.484,777,5.484,778,4.818,779,3.532,780,3.532,781,3.008,782,3.532,783,3.532,784,3.532,785,3.532,786,3.532,787,3.532,788,3.532,789,3.008,790,3.008,791,3.532,792,3.532,793,3.532,794,3.008,795,4.818,796,4.818,797,3.532,798,3.532,799,5.484,800,3.532,801,3.008,802,3.008,803,5.484,804,4.818,805,3.008,806,3.532,807,3.532,808,3.532,809,3.008,810,3.532,811,5.484,812,3.532,813,3.532,814,4.818,815,3.008,816,3.532,817,3.532,818,3.532,819,3.532,820,4.104,821,3.532,822,3.008,823,6.512,824,3.532,825,3.532,826,3.532,827,5.42,828,3.008,829,4.104,830,3.532,831,3.532,832,3.532,833,4.818,834,3.532,835,3.532,836,3.532,837,3.008,838,3.532,839,3.532,840,3.532,841,3.532,842,4.818,843,4.818,844,3.532,845,3.532,846,3.532,847,3.008,848,3.532,849,3.008,850,4.818,851,3.532,852,3.532,853,4.818,854,3.532,855,3.633,856,3.008,857,3.008,858,3.008,859,3.532]],["title/license.html",[774,2.501,775,2.501,855,2.214]],["body/license.html",[7,0.005,13,0.278,15,0.264,16,0.045,19,0.028,26,0.029,27,0.005,28,0.003,34,0.191,38,0.087,46,0.127,79,0.243,89,0.191,104,0.897,129,0.298,153,0.649,156,1.561,168,4.03,172,1.054,173,0.477,197,0.278,218,1.561,219,0.477,239,0.517,254,0.517,256,0.321,292,1.307,303,0.477,305,0.477,306,0.298,328,0.381,337,0.381,348,0.71,468,0.786,469,0.888,472,0.888,473,0.477,506,0.477,537,1.103,591,0.349,616,0.477,635,1.561,645,2.67,686,1.246,699,1.246,715,0.477,719,0.477,720,0.71,781,1.561,789,2.514,790,2.514,794,1.84,801,0.888,802,2.312,805,0.477,809,1.561,815,1.561,820,0.477,822,1.561,827,2.312,828,0.477,829,0.477,837,1.84,847,0.477,849,0.477,855,5.099,856,5.023,857,3.714,858,0.477,860,4.248,861,4.904,862,5.579,863,2.951,864,0.56,865,0.56,866,1.463,867,5.29,868,4.248,869,4.977,870,2.16,871,0.56,872,0.56,873,1.042,874,2.16,875,5.047,876,1.463,877,1.463,878,3.706,879,1.463,880,0.56,881,1.463,882,0.56,883,0.56,884,1.042,885,3.706,886,2.16,887,1.833,888,1.042,889,1.042,890,1.833,891,3.997,892,3.541,893,2.951,894,0.56,895,0.56,896,0.56,897,2.452,898,1.042,899,1.833,900,0.56,901,0.56,902,0.56,903,3.541,904,5.867,905,3.706,906,1.463,907,1.463,908,0.56,909,0.56,910,1.833,911,3.166,912,0.56,913,3.166,914,5.698,915,1.042,916,4.745,917,0.56,918,2.16,919,0.56,920,0.56,921,1.833,922,0.56,923,4.127,924,0.56,925,0.56,926,0.56,927,2.089,928,3.362,929,1.463,930,3.541,931,3.362,932,2.16,933,3.706,934,0.56,935,1.042,936,0.56,937,0.56,938,1.463,939,0.56,940,0.56,941,0.56,942,3.016,943,0.56,944,1.042,945,0.56,946,0.56,947,1.833,948,3.706,949,0.56,950,1.042,951,0.56,952,0.56,953,1.463,954,3.166,955,4.361,956,0.56,957,2.951,958,2.951,959,0.56,960,4.565,961,1.463,962,0.56,963,0.56,964,0.56,965,2.089,966,1.833,967,1.463,968,1.463,969,1.042,970,0.56,971,1.833,972,1.833,973,0.56,974,1.463,975,0.56,976,2.452,977,1.042,978,1.042,979,1.463,980,0.56,981,5.395,982,3.857,983,2.16,984,2.16,985,2.452,986,0.56,987,1.463,988,4.565,989,1.042,990,3.706,991,0.56,992,0.56,993,0.56,994,6.703,995,1.463,996,3.362,997,0.56,998,0.56,999,1.042,1000,2.452,1001,0.56,1002,1.042,1003,0.56,1004,3.362,1005,0.56,1006,1.833,1007,0.56,1008,1.042,1009,2.452,1010,5.836,1011,1.463,1012,3.166,1013,1.833,1014,1.042,1015,0.56,1016,1.042,1017,1.463,1018,3.166,1019,3.362,1020,1.833,1021,0.56,1022,1.833,1023,1.042,1024,1.833,1025,1.833,1026,0.56,1027,1.463,1028,0.56,1029,5.112,1030,1.042,1031,0.56,1032,2.951,1033,0.56,1034,1.463,1035,2.452,1036,0.56,1037,4.127,1038,1.463,1039,2.715,1040,1.042,1041,2.715,1042,3.541,1043,2.452,1044,0.56,1045,1.042,1046,0.56,1047,0.56,1048,2.715,1049,0.56,1050,3.857,1051,1.042,1052,3.857,1053,0.56,1054,1.042,1055,0.56,1056,0.56,1057,0.56,1058,1.463,1059,0.56,1060,0.56,1061,0.56,1062,0.56,1063,3.541,1064,1.463,1065,4.041,1066,2.951,1067,1.833,1068,0.56,1069,0.56,1070,0.56,1071,1.463,1072,1.042,1073,3.362,1074,0.56,1075,1.042,1076,2.452,1077,0.56,1078,0.56,1079,2.16,1080,1.463,1081,1.463,1082,2.715,1083,1.463,1084,1.463,1085,0.56,1086,0.56,1087,2.16,1088,2.16,1089,2.452,1090,0.56,1091,0.56,1092,1.463,1093,0.56,1094,0.56,1095,1.833,1096,0.56,1097,0.56,1098,0.56,1099,1.042,1100,0.56,1101,5.175,1102,1.042,1103,0.56,1104,1.463,1105,2.951,1106,0.56,1107,2.452,1108,3.541,1109,1.042,1110,1.833,1111,0.56,1112,0.56,1113,1.042,1114,2.16,1115,1.042,1116,1.833,1117,0.56,1118,0.56,1119,0.56,1120,0.56,1121,1.042,1122,2.16,1123,0.56,1124,1.246,1125,1.042,1126,0.56,1127,0.56,1128,2.16,1129,1.833,1130,0.56,1131,1.833,1132,0.56,1133,3.362,1134,2.715,1135,1.833,1136,0.56,1137,2.16,1138,0.56,1139,1.042,1140,0.56,1141,0.56,1142,1.042,1143,0.56,1144,0.56,1145,0.56,1146,1.463,1147,1.463,1148,2.452,1149,0.56,1150,1.042,1151,0.56,1152,1.042,1153,1.042,1154,1.042,1155,0.56,1156,3.857,1157,1.042,1158,0.56,1159,0.56,1160,0.56,1161,0.56,1162,0.56,1163,0.56,1164,1.463,1165,0.56,1166,0.56,1167,4.127,1168,0.56,1169,0.56,1170,0.56,1171,0.56,1172,2.16,1173,2.452,1174,0.56,1175,0.56,1176,1.463,1177,0.56,1178,0.56,1179,1.833,1180,0.56,1181,1.463,1182,0.56,1183,0.56,1184,0.56,1185,0.56,1186,0.56,1187,0.56,1188,1.042,1189,0.56,1190,1.463,1191,0.56,1192,0.56,1193,1.042,1194,0.56,1195,0.56,1196,0.56,1197,0.56,1198,0.56,1199,1.042,1200,1.042,1201,1.042,1202,3.166,1203,1.561,1204,0.56,1205,2.452,1206,0.56,1207,0.56,1208,1.042,1209,1.463,1210,1.463,1211,1.833,1212,1.833,1213,1.463,1214,1.833,1215,1.833,1216,0.56,1217,2.16,1218,2.16,1219,1.246,1220,0.56,1221,1.463,1222,0.888,1223,0.56,1224,1.042,1225,0.56,1226,1.042,1227,2.16,1228,1.042,1229,1.833,1230,1.833,1231,1.833,1232,0.56,1233,1.463,1234,3.997,1235,2.16,1236,0.56,1237,2.715,1238,0.56,1239,1.463,1240,2.715,1241,1.463,1242,1.463,1243,1.042,1244,0.56,1245,0.56,1246,0.56,1247,0.56,1248,1.463,1249,0.56,1250,0.56,1251,0.56,1252,1.463,1253,0.56,1254,0.56,1255,1.042,1256,0.56,1257,0.56,1258,1.042,1259,0.56,1260,0.56,1261,1.463,1262,0.56,1263,0.56,1264,1.463,1265,1.042,1266,2.452,1267,4.745,1268,1.463,1269,1.042,1270,1.042,1271,1.042,1272,1.042,1273,1.833,1274,1.833,1275,1.042,1276,0.56,1277,0.56,1278,0.56,1279,0.56,1280,0.56,1281,2.452,1282,2.452,1283,1.042,1284,0.56,1285,0.56,1286,0.56,1287,0.56,1288,1.042,1289,0.56,1290,1.042,1291,0.56,1292,2.16,1293,0.56,1294,0.56,1295,3.541,1296,1.042,1297,0.56,1298,0.56,1299,0.56,1300,0.56,1301,0.56,1302,0.56,1303,1.042,1304,0.56,1305,1.463,1306,1.833,1307,1.042,1308,0.56,1309,0.56,1310,0.56,1311,0.56,1312,0.56,1313,1.042,1314,0.56,1315,0.56,1316,0.56,1317,1.833,1318,0.56,1319,1.042,1320,0.56,1321,1.042,1322,0.56,1323,0.56,1324,0.56,1325,0.56,1326,0.56,1327,0.56,1328,1.833,1329,0.56,1330,0.56,1331,0.56,1332,0.56,1333,0.56,1334,0.56,1335,0.56,1336,1.463,1337,0.56,1338,0.56,1339,0.56,1340,0.56,1341,0.56,1342,2.16,1343,0.56,1344,0.56,1345,0.56,1346,0.56,1347,1.833,1348,0.56,1349,0.56,1350,0.56,1351,0.56,1352,0.56,1353,0.56,1354,0.56,1355,2.715,1356,1.463,1357,0.56,1358,1.833,1359,0.56,1360,0.56,1361,1.463,1362,0.56,1363,0.56,1364,1.463,1365,0.56,1366,1.042,1367,1.042,1368,0.56,1369,0.56,1370,0.56,1371,0.56,1372,0.56,1373,0.56,1374,0.56,1375,0.56,1376,0.56,1377,0.56,1378,0.56,1379,1.042,1380,0.56,1381,0.56,1382,0.56,1383,1.042,1384,1.042,1385,0.56,1386,0.56,1387,1.833,1388,0.56,1389,1.463,1390,1.042,1391,0.56,1392,1.042,1393,1.463,1394,1.463,1395,0.56,1396,1.042,1397,0.56,1398,1.463,1399,2.715,1400,0.56,1401,1.463,1402,1.463,1403,0.56,1404,0.56,1405,0.56,1406,0.56,1407,0.56,1408,0.56,1409,0.56,1410,1.042,1411,0.56,1412,1.042,1413,1.833,1414,1.463,1415,0.56,1416,0.56,1417,0.56,1418,0.56,1419,0.56,1420,0.56,1421,0.56,1422,1.042,1423,1.042,1424,1.042,1425,1.463,1426,0.56,1427,1.042,1428,1.042,1429,0.56,1430,1.042,1431,1.463,1432,0.56,1433,1.042,1434,0.56,1435,1.463,1436,0.56,1437,1.042,1438,0.56,1439,0.56,1440,0.56,1441,1.042,1442,4.904,1443,1.463,1444,0.56,1445,2.16,1446,3.362,1447,1.463,1448,0.56,1449,0.56,1450,0.56,1451,0.56,1452,1.833,1453,0.56,1454,0.56,1455,1.463,1456,0.56,1457,1.042,1458,0.56,1459,0.56,1460,0.56,1461,0.56,1462,1.833,1463,0.56,1464,0.56,1465,0.56,1466,0.56,1467,0.477,1468,1.833,1469,1.042,1470,1.042,1471,0.56,1472,0.56,1473,1.463,1474,0.56,1475,1.042,1476,1.463,1477,0.56,1478,1.042,1479,0.56,1480,0.56,1481,0.56,1482,0.56,1483,1.042,1484,1.463,1485,0.56,1486,0.56,1487,0.56,1488,0.56,1489,1.042,1490,0.56,1491,0.56,1492,0.56,1493,0.56,1494,0.56,1495,0.56,1496,1.463,1497,1.042,1498,0.56,1499,0.56,1500,0.56,1501,1.833,1502,0.56,1503,1.463,1504,0.56,1505,0.56,1506,0.56,1507,1.042,1508,0.56,1509,0.56,1510,0.56,1511,1.463,1512,1.042,1513,1.042,1514,0.56,1515,1.042,1516,2.715,1517,1.042,1518,1.463,1519,1.833,1520,0.56,1521,0.56,1522,1.042,1523,0.56,1524,1.463,1525,0.56,1526,1.042,1527,0.56,1528,0.56,1529,0.56,1530,0.56,1531,0.56,1532,1.042,1533,1.463,1534,1.042,1535,0.56,1536,1.042,1537,0.56,1538,0.56,1539,0.56,1540,1.042,1541,1.042,1542,0.56,1543,1.042,1544,0.56,1545,0.56,1546,0.56,1547,0.56,1548,1.463,1549,0.56,1550,0.56,1551,0.56,1552,0.56,1553,1.042,1554,1.833,1555,1.042,1556,1.463,1557,0.56,1558,0.56,1559,0.56,1560,0.56,1561,1.042,1562,0.56,1563,0.56,1564,0.56,1565,0.56,1566,0.56,1567,0.56,1568,0.56,1569,0.56,1570,0.56,1571,0.56,1572,0.56,1573,0.56,1574,0.56,1575,0.56,1576,0.56,1577,1.833,1578,0.56,1579,0.56,1580,0.56,1581,1.042,1582,0.56,1583,0.56,1584,0.56,1585,0.56,1586,0.56,1587,0.56,1588,0.56,1589,0.56,1590,0.56,1591,0.56,1592,0.56,1593,1.042,1594,0.56,1595,0.56,1596,1.042,1597,0.56,1598,0.56,1599,0.56,1600,0.56,1601,0.56,1602,1.042,1603,0.56,1604,0.56,1605,1.042,1606,0.56,1607,0.56,1608,0.56,1609,0.56,1610,0.56,1611,0.56,1612,0.56,1613,0.56,1614,1.042,1615,1.042,1616,2.16,1617,0.56,1618,0.56,1619,1.042,1620,0.56,1621,0.56,1622,0.56,1623,0.56,1624,1.463,1625,1.042,1626,0.56,1627,1.042,1628,1.042,1629,1.042,1630,0.56,1631,0.56,1632,0.56,1633,0.56,1634,0.56,1635,0.56,1636,1.042,1637,0.56,1638,0.56,1639,0.56,1640,1.042,1641,0.56,1642,0.56,1643,1.463,1644,0.56,1645,0.56,1646,0.56,1647,0.56,1648,0.56,1649,0.56,1650,0.56,1651,0.56,1652,0.56,1653,0.56,1654,0.56,1655,1.042,1656,0.56,1657,0.56,1658,0.56,1659,0.56,1660,1.042,1661,0.56,1662,0.56,1663,0.56,1664,0.56,1665,0.56,1666,0.56,1667,0.56,1668,0.56,1669,0.56,1670,0.56,1671,0.56,1672,0.56,1673,0.56,1674,0.56,1675,0.56,1676,0.56,1677,1.042,1678,1.042,1679,0.56,1680,0.56,1681,0.56,1682,0.56,1683,0.56,1684,0.56,1685,0.56,1686,0.56,1687,0.56,1688,0.56,1689,0.56,1690,0.56,1691,0.56,1692,0.56,1693,0.56,1694,0.56,1695,0.56,1696,0.56,1697,0.56,1698,0.56,1699,0.56,1700,0.56,1701,0.56,1702,0.56,1703,0.56]],["title/modules.html",[2,1.848]],["body/modules.html",[1,3.142,2,1.94,6,3.142,7,0.019,8,3.142,9,3.142,10,3.142,27,0.019,28,0.019,48,3.436,52,2.897,265,3.436,540,3.436,942,5.529,1219,5.956,1704,6.993,1705,6.993,1706,7.178,1707,6.492]],["title/overview.html",[1708,4.093]],["body/overview.html",[1,4.4,2,1.619,3,2.513,4,3.587,5,3.587,6,4.165,7,0.022,8,3.727,9,4.069,10,4.069,11,2.885,12,2.244,13,2.091,27,0.017,28,0.017,31,1.721,42,3.437,48,4.693,49,3.587,50,3.587,51,3.587,52,3.437,59,2.623,86,2.541,106,3.587,107,3.587,108,3.587,228,1.076,265,4.555,266,3.587,268,3.587,269,2.287,321,3.176,377,2.971,440,3.587,441,3.587,565,2.971,667,3.587,668,3.587,927,3.587,1203,3.587,1222,3.587,1467,3.587,1708,3.587,1709,4.212]],["title/miscellaneous/variables.html",[771,2,1710,3.605]],["body/miscellaneous/variables.html",[7,0.023,27,0.017,28,0.017,33,0.584,46,0.981,77,1.095,80,2.691,98,1.239,104,1.673,114,0.817,154,4.193,155,5.734,172,1.406,273,4.15,274,4.15,275,4.15,276,4.15,278,2.943,281,2.943,326,2.943,333,2.943,343,2.943,726,3.68,734,3.68,735,4.688,771,2.943,965,5.609,1065,5.609,1124,3.68,1710,3.68,1711,6.585,1712,4.321,1713,4.321,1714,6.585,1715,4.321,1716,4.321,1717,4.321,1718,4.321,1719,4.321,1720,4.321,1721,4.321]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":256,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/UserEntity.html":{},"coverage.html":{},"license.html":{}}}],["0.1.13",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["0.2.34",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":296,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["1",{"_index":292,"title":{},"body":{"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserFollowingEntity.html":{},"license.html":{}}}],["1/4",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["11",{"_index":1181,"title":{},"body":{"license.html":{}}}],["12",{"_index":1579,"title":{},"body":{"license.html":{}}}],["13",{"_index":1593,"title":{},"body":{"license.html":{}}}],["14",{"_index":1604,"title":{},"body":{"license.html":{}}}],["15",{"_index":1401,"title":{},"body":{"license.html":{}}}],["16",{"_index":1402,"title":{},"body":{"license.html":{}}}],["17",{"_index":1658,"title":{},"body":{"license.html":{}}}],["18",{"_index":1709,"title":{},"body":{"overview.html":{}}}],["19",{"_index":864,"title":{},"body":{"license.html":{}}}],["1996",{"_index":1187,"title":{},"body":{"license.html":{}}}],["2",{"_index":927,"title":{},"body":{"license.html":{},"overview.html":{}}}],["2.3.4",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["2/8",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1185,"title":{},"body":{"license.html":{}}}],["2007",{"_index":866,"title":{},"body":{"license.html":{}}}],["240",{"_index":247,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["25",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":1573,"title":{},"body":{"license.html":{}}}],["3",{"_index":863,"title":{},"body":{"license.html":{}}}],["3.0.2",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":616,"title":{},"body":{"classes/UserEntity.html":{},"license.html":{}}}],["4",{"_index":1203,"title":{},"body":{"license.html":{},"overview.html":{}}}],["4.8.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1222,"title":{},"body":{"license.html":{},"overview.html":{}}}],["5.0.1",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["5.1.5",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":614,"title":{},"body":{"classes/UserEntity.html":{}}}],["6",{"_index":1259,"title":{},"body":{"license.html":{}}}],["60",{"_index":1456,"title":{},"body":{"license.html":{}}}],["6b",{"_index":1289,"title":{},"body":{"license.html":{}}}],["6d",{"_index":1311,"title":{},"body":{"license.html":{}}}],["7",{"_index":1215,"title":{},"body":{"license.html":{}}}],["7.4.0",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1436,"title":{},"body":{"license.html":{}}}],["8.0.2",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["8.2.3",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["8.6.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1467,"title":{},"body":{"license.html":{},"overview.html":{}}}],["ability",{"_index":1363,"title":{},"body":{"license.html":{}}}],["above",{"_index":1435,"title":{},"body":{"license.html":{}}}],["absence",{"_index":1216,"title":{},"body":{"license.html":{}}}],["absolute",{"_index":1667,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":318,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["accept",{"_index":1469,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1468,"title":{},"body":{"license.html":{}}}],["access",{"_index":957,"title":{},"body":{"license.html":{}}}],["accessible",{"_index":969,"title":{},"body":{"license.html":{}}}],["accompanied",{"_index":1268,"title":{},"body":{"license.html":{}}}],["accompanies",{"_index":1671,"title":{},"body":{"license.html":{}}}],["accomplish",{"_index":973,"title":{},"body":{"license.html":{}}}],["accord",{"_index":1214,"title":{},"body":{"license.html":{}}}],["according",{"_index":1662,"title":{},"body":{"license.html":{}}}],["achieve",{"_index":1676,"title":{},"body":{"license.html":{}}}],["acknowledges",{"_index":1144,"title":{},"body":{"license.html":{}}}],["acquired",{"_index":1522,"title":{},"body":{"license.html":{}}}],["actions",{"_index":1477,"title":{},"body":{"license.html":{}}}],["activities",{"_index":1027,"title":{},"body":{"license.html":{}}}],["activity",{"_index":1568,"title":{},"body":{"license.html":{}}}],["actual",{"_index":219,"title":{},"body":{"controllers/HashtagsController.html":{},"license.html":{}}}],["actually",{"_index":1335,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":1003,"title":{},"body":{"license.html":{}}}],["add",{"_index":218,"title":{},"body":{"controllers/HashtagsController.html":{},"license.html":{}}}],["added",{"_index":1213,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1234,"title":{},"body":{"license.html":{}}}],["address",{"_index":1610,"title":{},"body":{"license.html":{}}}],["addressed",{"_index":998,"title":{},"body":{"license.html":{}}}],["addselect('origpost.author",{"_index":480,"title":{},"body":{"injectables/PostsService.html":{}}}],["addselect('posts.created_at",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["addselect('replyto.author",{"_index":484,"title":{},"body":{"injectables/PostsService.html":{}}}],["adopted",{"_index":1184,"title":{},"body":{"license.html":{}}}],["advanced",{"_index":533,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["adversely",{"_index":1372,"title":{},"body":{"license.html":{}}}],["advised",{"_index":1656,"title":{},"body":{"license.html":{}}}],["affects",{"_index":1373,"title":{},"body":{"license.html":{}}}],["affero",{"_index":860,"title":{},"body":{"license.html":{}}}],["affirmed",{"_index":1502,"title":{},"body":{"license.html":{}}}],["affirms",{"_index":1140,"title":{},"body":{"license.html":{}}}],["against",{"_index":1201,"title":{},"body":{"license.html":{}}}],["aggregate",{"_index":1252,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":858,"title":{},"body":{"index.html":{},"license.html":{}}}],["agree",{"_index":1587,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1642,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1533,"title":{},"body":{"license.html":{}}}],["alleging",{"_index":1510,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":881,"title":{},"body":{"license.html":{}}}],["along",{"_index":1218,"title":{},"body":{"license.html":{}}}],["already",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["alternate",{"_index":939,"title":{},"body":{"license.html":{}}}],["alternative",{"_index":1285,"title":{},"body":{"license.html":{}}}],["ancillary",{"_index":1471,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":932,"title":{},"body":{"license.html":{}}}],["anti",{"_index":1171,"title":{},"body":{"license.html":{}}}],["anymore",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["anyone",{"_index":1231,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1013,"title":{},"body":{"license.html":{}}}],["api",{"_index":780,"title":{},"body":{"index.html":{}}}],["api.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["apibearerauth",{"_index":374,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:postid",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:postid/like",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@delete('/:userid/follow",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@get('/:userid/followers",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@patch('/:userid",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@post",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:postid/like",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:userid/follow",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibearerauth()@useguards(requiredauthguard)@put('/:userid/followees",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["apimodule",{"_index":1,"title":{"modules/ApiModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apiparam",{"_index":563,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apipropertyoptional",{"_index":366,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["apiresponse({type",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["apitags('hashtags",{"_index":215,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["apitags('posts",{"_index":381,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["apitags('users",{"_index":568,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":825,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":30,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicable",{"_index":1018,"title":{},"body":{"license.html":{}}}],["application",{"_index":305,"title":{},"body":{"classes/MooBaseEntity.html":{},"license.html":{}}}],["applies",{"_index":1617,"title":{},"body":{"license.html":{}}}],["apply",{"_index":990,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":48,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1041,"title":{},"body":{"license.html":{}}}],["appropriately",{"_index":1207,"title":{},"body":{"license.html":{}}}],["approximates",{"_index":1666,"title":{},"body":{"license.html":{}}}],["appservice",{"_index":42,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["archive",{"_index":1696,"title":{},"body":{"license.html":{}}}],["arising",{"_index":1646,"title":{},"body":{"license.html":{}}}],["arrange",{"_index":1543,"title":{},"body":{"license.html":{}}}],["arrangement",{"_index":1556,"title":{},"body":{"license.html":{}}}],["array",{"_index":252,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["article",{"_index":1180,"title":{},"body":{"license.html":{}}}],["assert",{"_index":926,"title":{},"body":{"license.html":{}}}],["assets",{"_index":1491,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1117,"title":{},"body":{"license.html":{}}}],["assume",{"_index":1635,"title":{},"body":{"license.html":{}}}],["assumption",{"_index":1670,"title":{},"body":{"license.html":{}}}],["assumptions",{"_index":1424,"title":{},"body":{"license.html":{}}}],["async",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attach",{"_index":1678,"title":{},"body":{"license.html":{}}}],["attempt",{"_index":1439,"title":{},"body":{"license.html":{}}}],["attributions",{"_index":1404,"title":{},"body":{"license.html":{}}}],["auth",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["auth/auth.module",{"_index":21,"title":{},"body":{"modules/ApiModule.html":{}}}],["auth/login",{"_index":840,"title":{},"body":{"index.html":{}}}],["authcontroller",{"_index":64,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["authduser",{"_index":585,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["authduser.id",{"_index":588,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":254,"title":{},"body":{"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"license.html":{}}}],["author_id",{"_index":253,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["authorid",{"_index":380,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["authorization",{"_index":337,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["authorized",{"_index":1395,"title":{},"body":{"license.html":{}}}],["authorizes",{"_index":1517,"title":{},"body":{"license.html":{}}}],["authorizetoken",{"_index":548,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["authorizetoken(context",{"_index":332,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["authorizing",{"_index":1560,"title":{},"body":{"license.html":{}}}],["authors",{"_index":1414,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":86,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice.password_salt_rounds",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["automatic",{"_index":1481,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":1131,"title":{},"body":{"license.html":{}}}],["available",{"_index":942,"title":{},"body":{"license.html":{},"modules.html":{}}}],["avatar",{"_index":554,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["await",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["away",{"_index":896,"title":{},"body":{"license.html":{}}}],["b",{"_index":1089,"title":{},"body":{"license.html":{}}}],["backend",{"_index":779,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":465,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('post",{"_index":505,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":302,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["based",{"_index":1009,"title":{},"body":{"license.html":{}}}],["basic",{"_index":1132,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["become",{"_index":941,"title":{},"body":{"license.html":{}}}],["becomes",{"_index":962,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":1158,"title":{},"body":{"license.html":{}}}],["being",{"_index":801,"title":{},"body":{"index.html":{},"license.html":{}}}],["believe",{"_index":1552,"title":{},"body":{"license.html":{}}}],["below",{"_index":1165,"title":{},"body":{"license.html":{}}}],["benefit",{"_index":935,"title":{},"body":{"license.html":{}}}],["best",{"_index":1675,"title":{},"body":{"license.html":{}}}],["better",{"_index":1698,"title":{},"body":{"license.html":{}}}],["between",{"_index":1127,"title":{},"body":{"license.html":{}}}],["beyond",{"_index":1254,"title":{},"body":{"license.html":{}}}],["bio",{"_index":555,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["board",{"_index":796,"title":{},"body":{"index.html":{}}}],["body",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["body.password",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["body.username",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["boolean",{"_index":622,"title":{},"body":{"classes/UserEntity.html":{}}}],["bootstrap",{"_index":738,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":1590,"title":{},"body":{"license.html":{}}}],["browse",{"_index":1706,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1704,"title":{},"body":{"modules.html":{}}}],["building",{"_index":818,"title":{},"body":{"index.html":{}}}],["built",{"_index":812,"title":{},"body":{"index.html":{}}}],["business",{"_index":1565,"title":{},"body":{"license.html":{}}}],["c",{"_index":1229,"title":{},"body":{"license.html":{}}}],["called",{"_index":971,"title":{},"body":{"license.html":{}}}],["canactivate",{"_index":324,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["canactivate(context",{"_index":325,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["carry",{"_index":1224,"title":{},"body":{"license.html":{}}}],["cascade",{"_index":620,"title":{},"body":{"classes/UserEntity.html":{}}}],["case",{"_index":890,"title":{},"body":{"license.html":{}}}],["cases",{"_index":961,"title":{},"body":{"license.html":{}}}],["catch",{"_index":347,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["cause",{"_index":1258,"title":{},"body":{"license.html":{}}}],["cease",{"_index":1444,"title":{},"body":{"license.html":{}}}],["certain",{"_index":1392,"title":{},"body":{"license.html":{}}}],["cessation",{"_index":1458,"title":{},"body":{"license.html":{}}}],["change",{"_index":899,"title":{},"body":{"license.html":{}}}],["changing",{"_index":880,"title":{},"body":{"license.html":{}}}],["characterized",{"_index":1360,"title":{},"body":{"license.html":{}}}],["charge",{"_index":911,"title":{},"body":{"license.html":{}}}],["choose",{"_index":1619,"title":{},"body":{"license.html":{}}}],["choosing",{"_index":1623,"title":{},"body":{"license.html":{}}}],["circumstances",{"_index":1163,"title":{},"body":{"license.html":{}}}],["circumvention",{"_index":1172,"title":{},"body":{"license.html":{}}}],["civil",{"_index":1669,"title":{},"body":{"license.html":{}}}],["claim",{"_index":1507,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1519,"title":{},"body":{"license.html":{}}}],["class",{"_index":26,"title":{"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"classes/UsersRepository.html":{}},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{}}}],["classes",{"_index":228,"title":{},"body":{"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"classes/UsersRepository.html":{},"overview.html":{}}}],["clear",{"_index":1298,"title":{},"body":{"license.html":{}}}],["clone",{"_index":778,"title":{},"body":{"index.html":{}}}],["closely",{"_index":1665,"title":{},"body":{"license.html":{}}}],["cluster_apimodule",{"_index":4,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_apimodule_imports",{"_index":5,"title":{},"body":{"modules/ApiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_mockpostsmodule",{"_index":266,"title":{},"body":{"modules/MockPostsModule.html":{},"overview.html":{}}}],["cluster_mockpostsmodule_exports",{"_index":268,"title":{},"body":{"modules/MockPostsModule.html":{},"overview.html":{}}}],["cluster_mockpostsmodule_providers",{"_index":267,"title":{},"body":{"modules/MockPostsModule.html":{}}}],["cluster_postsmodule",{"_index":440,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":441,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":667,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":668,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":914,"title":{},"body":{"license.html":{}}}],["coding",{"_index":821,"title":{},"body":{"index.html":{}}}],["collect",{"_index":1589,"title":{},"body":{"license.html":{}}}],["column",{"_index":238,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{}}}],["column('boolean",{"_index":623,"title":{},"body":{"classes/UserEntity.html":{}}}],["column('json",{"_index":250,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["column({length",{"_index":418,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["column({name",{"_index":411,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["column({nullable",{"_index":350,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/UserEntity.html":{}}}],["combine",{"_index":1603,"title":{},"body":{"license.html":{}}}],["combined",{"_index":1248,"title":{},"body":{"license.html":{}}}],["come",{"_index":952,"title":{},"body":{"license.html":{}}}],["comes",{"_index":1232,"title":{},"body":{"license.html":{}}}],["commands",{"_index":1055,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":1340,"title":{},"body":{"license.html":{}}}],["commitment",{"_index":1534,"title":{},"body":{"license.html":{}}}],["common",{"_index":1333,"title":{},"body":{"license.html":{}}}],["commons/db.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["communication",{"_index":1125,"title":{},"body":{"license.html":{}}}],["community",{"_index":889,"title":{},"body":{"license.html":{}}}],["compare",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["compilation",{"_index":1243,"title":{},"body":{"license.html":{}}}],["compilation's",{"_index":1253,"title":{},"body":{"license.html":{}}}],["compilations",{"_index":1571,"title":{},"body":{"license.html":{}}}],["compiler",{"_index":1098,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":1487,"title":{},"body":{"license.html":{}}}],["comply",{"_index":1155,"title":{},"body":{"license.html":{}}}],["component",{"_index":1088,"title":{},"body":{"license.html":{}}}],["compress",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["computer",{"_index":1022,"title":{},"body":{"license.html":{}}}],["concerns",{"_index":1612,"title":{},"body":{"license.html":{}}}],["conditioned",{"_index":1564,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":982,"title":{},"body":{"license.html":{}}}],["conflictexception",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":1554,"title":{},"body":{"license.html":{}}}],["consequence",{"_index":1473,"title":{},"body":{"license.html":{}}}],["consequential",{"_index":1645,"title":{},"body":{"license.html":{}}}],["considered",{"_index":1426,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1526,"title":{},"body":{"license.html":{}}}],["console",{"_index":534,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["conspicuously",{"_index":1206,"title":{},"body":{"license.html":{}}}],["const",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constitutes",{"_index":1143,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginResponseBody.html":{},"injectables/PostsService.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(authservice",{"_index":330,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["constructor(authservice",{"_index":549,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["constructor(postsrepository",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["constructor(token",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["constructor(userrepo",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["construed",{"_index":1575,"title":{},"body":{"license.html":{}}}],["consumer",{"_index":1317,"title":{},"body":{"license.html":{}}}],["contact",{"_index":1688,"title":{},"body":{"license.html":{}}}],["contain",{"_index":506,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["containing",{"_index":1406,"title":{},"body":{"license.html":{}}}],["contains",{"_index":1430,"title":{},"body":{"license.html":{}}}],["content",{"_index":849,"title":{},"body":{"index.html":{},"license.html":{}}}],["contents",{"_index":1530,"title":{},"body":{"license.html":{}}}],["context",{"_index":328,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["context.switchtohttp().getrequest",{"_index":334,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["continue",{"_index":1366,"title":{},"body":{"license.html":{}}}],["continued",{"_index":1350,"title":{},"body":{"license.html":{}}}],["contractual",{"_index":1423,"title":{},"body":{"license.html":{}}}],["contradict",{"_index":1583,"title":{},"body":{"license.html":{}}}],["contrast",{"_index":900,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1516,"title":{},"body":{"license.html":{}}}],["contributor's",{"_index":1518,"title":{},"body":{"license.html":{}}}],["control",{"_index":1107,"title":{},"body":{"license.html":{}}}],["controlled",{"_index":1521,"title":{},"body":{"license.html":{}}}],["controller",{"_index":29,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["controller('hashtags",{"_index":216,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["controller('posts",{"_index":382,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["controller('users",{"_index":569,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convenient",{"_index":1044,"title":{},"body":{"license.html":{}}}],["convey",{"_index":1029,"title":{},"body":{"license.html":{}}}],["conveyance",{"_index":1558,"title":{},"body":{"license.html":{}}}],["conveyed",{"_index":1361,"title":{},"body":{"license.html":{}}}],["conveying",{"_index":1037,"title":{},"body":{"license.html":{}}}],["conveys",{"_index":1422,"title":{},"body":{"license.html":{}}}],["cooperation",{"_index":888,"title":{},"body":{"license.html":{}}}],["copies",{"_index":878,"title":{},"body":{"license.html":{}}}],["copy",{"_index":875,"title":{},"body":{"license.html":{}}}],["copying",{"_index":983,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":883,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":867,"title":{},"body":{"license.html":{}}}],["copyrightable",{"_index":993,"title":{},"body":{"license.html":{}}}],["copyrighted",{"_index":1161,"title":{},"body":{"license.html":{}}}],["correction",{"_index":1639,"title":{},"body":{"license.html":{}}}],["corresponding",{"_index":1101,"title":{},"body":{"license.html":{}}}],["cost",{"_index":1283,"title":{},"body":{"license.html":{}}}],["counterclaim",{"_index":1508,"title":{},"body":{"license.html":{}}}],["countries",{"_index":1026,"title":{},"body":{"license.html":{}}}],["country",{"_index":1548,"title":{},"body":{"license.html":{}}}],["court",{"_index":1582,"title":{},"body":{"license.html":{}}}],["courts",{"_index":1664,"title":{},"body":{"license.html":{}}}],["covenant",{"_index":1538,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":720,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["covered",{"_index":1010,"title":{},"body":{"license.html":{}}}],["create",{"_index":501,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["created",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["created_at",{"_index":308,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["createdat",{"_index":297,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["createdatecolumn",{"_index":315,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["createdatecolumn({name",{"_index":307,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["createdpost",{"_index":392,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["createnewpost",{"_index":391,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["createnewpost(author",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["createnewsession",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewsession(username",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["createnewuser",{"_index":579,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["createnewuser(createuserrequest",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["createparamdecorator",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpasswordfornewuser",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["createpasswordfornewuser(userid",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["createpost",{"_index":450,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(post",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{}}}],["createquerybuilder('posts",{"_index":477,"title":{},"body":{"injectables/PostsService.html":{}}}],["createuser",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(user",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserfollowrelation",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserfollowrelation(follower",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserrequest",{"_index":580,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["createuserrequest.password",{"_index":582,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["criterion",{"_index":1061,"title":{},"body":{"license.html":{}}}],["cross",{"_index":1506,"title":{},"body":{"license.html":{}}}],["ctx",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cure",{"_index":1463,"title":{},"body":{"license.html":{}}}],["customarily",{"_index":1271,"title":{},"body":{"license.html":{}}}],["customary",{"_index":1599,"title":{},"body":{"license.html":{}}}],["customer",{"_index":1278,"title":{},"body":{"license.html":{}}}],["d",{"_index":1241,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1643,"title":{},"body":{"license.html":{}}}],["data",{"_index":1124,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":520,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["date",{"_index":306,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"license.html":{}}}],["date('2020",{"_index":295,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["days",{"_index":1457,"title":{},"body":{"license.html":{}}}],["db",{"_index":792,"title":{},"body":{"index.html":{}}}],["december",{"_index":1186,"title":{},"body":{"license.html":{}}}],["decide",{"_index":1621,"title":{},"body":{"license.html":{}}}],["declining",{"_index":1415,"title":{},"body":{"license.html":{}}}],["decorators",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["deemed",{"_index":1174,"title":{},"body":{"license.html":{}}}],["default",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defective",{"_index":1634,"title":{},"body":{"license.html":{}}}],["defending",{"_index":936,"title":{},"body":{"license.html":{}}}],["defenses",{"_index":1578,"title":{},"body":{"license.html":{}}}],["defined",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["definition",{"_index":1115,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":986,"title":{},"body":{"license.html":{}}}],["delete",{"_index":370,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["delete('/:postid",{"_index":396,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["delete('/:postid/like",{"_index":401,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["delete('/:userid/follow",{"_index":599,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["deletect",{"_index":503,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('postid",{"_index":397,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletepost(postid",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["deleteresult",{"_index":498,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteresult.affected",{"_index":500,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleteuserfollowrelation",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuserfollowrelation(follower",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["denied",{"_index":1369,"title":{},"body":{"license.html":{}}}],["denominated",{"_index":1535,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprive",{"_index":1544,"title":{},"body":{"license.html":{}}}],["desc",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{}}}],["description",{"_index":301,"title":{},"body":{"classes/MooBaseEntity.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"injectables/UsersService.html":{}}}],["design",{"_index":800,"title":{},"body":{"index.html":{}}}],["designated",{"_index":1291,"title":{},"body":{"license.html":{}}}],["designed",{"_index":802,"title":{},"body":{"index.html":{},"license.html":{}}}],["detail",{"_index":1609,"title":{},"body":{"license.html":{}}}],["details",{"_index":591,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["detect",{"_index":502,"title":{},"body":{"injectables/PostsService.html":{}}}],["determining",{"_index":1327,"title":{},"body":{"license.html":{}}}],["develop",{"_index":1672,"title":{},"body":{"license.html":{}}}],["developers",{"_index":921,"title":{},"body":{"license.html":{}}}],["development",{"_index":826,"title":{},"body":{"index.html":{}}}],["differ",{"_index":1608,"title":{},"body":{"license.html":{}}}],["different",{"_index":976,"title":{},"body":{"license.html":{}}}],["differently",{"_index":1400,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1159,"title":{},"body":{"license.html":{}}}],["directions",{"_index":1299,"title":{},"body":{"license.html":{}}}],["directly",{"_index":1014,"title":{},"body":{"license.html":{}}}],["disclaim",{"_index":1197,"title":{},"body":{"license.html":{}}}],["disclaimer",{"_index":1624,"title":{},"body":{"license.html":{}}}],["disclaiming",{"_index":1397,"title":{},"body":{"license.html":{}}}],["discriminatory",{"_index":1561,"title":{},"body":{"license.html":{}}}],["discussion",{"_index":795,"title":{},"body":{"index.html":{}}}],["display",{"_index":1242,"title":{},"body":{"license.html":{}}}],["displayed",{"_index":1405,"title":{},"body":{"license.html":{}}}],["displays",{"_index":1040,"title":{},"body":{"license.html":{}}}],["distinguishing",{"_index":1613,"title":{},"body":{"license.html":{}}}],["distribute",{"_index":876,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1685,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":1566,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":984,"title":{},"body":{"license.html":{}}}],["document",{"_index":879,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["documented",{"_index":1378,"title":{},"body":{"license.html":{}}}],["doe",{"_index":290,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["doubtful",{"_index":1329,"title":{},"body":{"license.html":{}}}],["downstream",{"_index":1483,"title":{},"body":{"license.html":{}}}],["dropschema",{"_index":539,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["durable",{"_index":1270,"title":{},"body":{"license.html":{}}}],["dwelling",{"_index":1326,"title":{},"body":{"license.html":{}}}],["dynamically",{"_index":1119,"title":{},"body":{"license.html":{}}}],["e",{"_index":348,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"license.html":{}}}],["e2e",{"_index":834,"title":{},"body":{"index.html":{}}}],["each",{"_index":996,"title":{},"body":{"license.html":{}}}],["earlier",{"_index":1008,"title":{},"body":{"license.html":{}}}],["effect",{"_index":1661,"title":{},"body":{"license.html":{}}}],["effected",{"_index":1194,"title":{},"body":{"license.html":{}}}],["effective",{"_index":1175,"title":{},"body":{"license.html":{}}}],["effectively",{"_index":1680,"title":{},"body":{"license.html":{}}}],["efforts",{"_index":1500,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1689,"title":{},"body":{"license.html":{}}}],["embodied",{"_index":1265,"title":{},"body":{"license.html":{}}}],["employer",{"_index":1699,"title":{},"body":{"license.html":{}}}],["enable",{"_index":1091,"title":{},"body":{"license.html":{}}}],["enables",{"_index":1031,"title":{},"body":{"license.html":{}}}],["encouraged",{"_index":946,"title":{},"body":{"license.html":{}}}],["end",{"_index":820,"title":{},"body":{"index.html":{},"license.html":{}}}],["enforce",{"_index":1536,"title":{},"body":{"license.html":{}}}],["enforcing",{"_index":1200,"title":{},"body":{"license.html":{}}}],["ensure",{"_index":887,"title":{},"body":{"license.html":{}}}],["entered",{"_index":1572,"title":{},"body":{"license.html":{}}}],["entire",{"_index":1230,"title":{},"body":{"license.html":{}}}],["entirely",{"_index":1592,"title":{},"body":{"license.html":{}}}],["entities",{"_index":304,"title":{},"body":{"classes/MooBaseEntity.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["entity",{"_index":239,"title":{},"body":{"classes/Mention.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"license.html":{}}}],["entity('passwords",{"_index":361,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["entity('posts",{"_index":243,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["entity('sessions",{"_index":547,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["entity('user_followings",{"_index":638,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["entity('users",{"_index":625,"title":{},"body":{"classes/UserEntity.html":{}}}],["entityrepository",{"_index":447,"title":{},"body":{"classes/PostsRepository.html":{},"classes/UsersRepository.html":{}}}],["entityrepository(postentity",{"_index":448,"title":{},"body":{"classes/PostsRepository.html":{}}}],["entityrepository(userentity",{"_index":673,"title":{},"body":{"classes/UsersRepository.html":{}}}],["equivalent",{"_index":1146,"title":{},"body":{"license.html":{}}}],["essential",{"_index":1092,"title":{},"body":{"license.html":{}}}],["even",{"_index":1655,"title":{},"body":{"license.html":{}}}],["event",{"_index":1641,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":873,"title":{},"body":{"license.html":{}}}],["exact",{"_index":1007,"title":{},"body":{"license.html":{}}}],["example",{"_index":1114,"title":{},"body":{"license.html":{}}}],["except",{"_index":1020,"title":{},"body":{"license.html":{}}}],["exceptions",{"_index":1384,"title":{},"body":{"license.html":{}}}],["excluded",{"_index":1315,"title":{},"body":{"license.html":{}}}],["excluding",{"_index":1576,"title":{},"body":{"license.html":{}}}],["exclusion",{"_index":1682,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1527,"title":{},"body":{"license.html":{}}}],["exclusively",{"_index":1153,"title":{},"body":{"license.html":{}}}],["excuse",{"_index":1584,"title":{},"body":{"license.html":{}}}],["executable",{"_index":1081,"title":{},"body":{"license.html":{}}}],["execute",{"_index":1348,"title":{},"body":{"license.html":{}}}],["executing",{"_index":1021,"title":{},"body":{"license.html":{}}}],["executioncontext",{"_index":326,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["exercise",{"_index":1501,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1195,"title":{},"body":{"license.html":{}}}],["exist",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguser",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.avatar",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.bio",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["existinguser.name",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["expected",{"_index":1338,"title":{},"body":{"license.html":{}}}],["expects",{"_index":1337,"title":{},"body":{"license.html":{}}}],["explicitly",{"_index":1139,"title":{},"body":{"license.html":{}}}],["export",{"_index":25,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"modules/MockPostsModule.html":{}}}],["express",{"_index":1532,"title":{},"body":{"license.html":{}}}],["expressed",{"_index":1626,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":1438,"title":{},"body":{"license.html":{}}}],["extend",{"_index":1546,"title":{},"body":{"license.html":{}}}],["extended",{"_index":303,"title":{},"body":{"classes/MooBaseEntity.html":{},"license.html":{}}}],["extends",{"_index":245,"title":{},"body":{"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UsersRepository.html":{}}}],["extensions",{"_index":1247,"title":{},"body":{"license.html":{}}}],["extent",{"_index":1043,"title":{},"body":{"license.html":{}}}],["f",{"_index":1420,"title":{},"body":{"license.html":{}}}],["facilitating",{"_index":1600,"title":{},"body":{"license.html":{}}}],["facilities",{"_index":1154,"title":{},"body":{"license.html":{}}}],["fail",{"_index":951,"title":{},"body":{"license.html":{}}}],["fails",{"_index":1453,"title":{},"body":{"license.html":{}}}],["failure",{"_index":1653,"title":{},"body":{"license.html":{}}}],["fair",{"_index":1145,"title":{},"body":{"license.html":{}}}],["false",{"_index":351,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/UserEntity.html":{}}}],["family",{"_index":1322,"title":{},"body":{"license.html":{}}}],["fashion",{"_index":1005,"title":{},"body":{"license.html":{}}}],["fastify",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["favor",{"_index":1331,"title":{},"body":{"license.html":{}}}],["feature",{"_index":1047,"title":{},"body":{"license.html":{}}}],["features",{"_index":791,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1221,"title":{},"body":{"license.html":{}}}],["figma",{"_index":803,"title":{},"body":{"index.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{}}}],["files",{"_index":1116,"title":{},"body":{"license.html":{}}}],["filter",{"_index":474,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["finally",{"_index":1450,"title":{},"body":{"license.html":{}}}],["find",{"_index":468,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["findone",{"_index":283,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["first",{"_index":1461,"title":{},"body":{"license.html":{}}}],["fitness",{"_index":1629,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":1269,"title":{},"body":{"license.html":{}}}],["flow",{"_index":1126,"title":{},"body":{"license.html":{}}}],["follow",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["followeduser",{"_index":597,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["followee",{"_index":629,"title":{},"body":{"classes/UserFollowingEntity.html":{},"injectables/UsersService.html":{}}}],["followee_count",{"_index":610,"title":{},"body":{"classes/UserEntity.html":{}}}],["followee_id",{"_index":640,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followee_id'})@manytoone(undefined",{"_index":630,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followeecount",{"_index":291,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["followeeid",{"_index":596,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["follower",{"_index":595,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["follower+followee",{"_index":636,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["follower_count",{"_index":612,"title":{},"body":{"classes/UserEntity.html":{}}}],["follower_id",{"_index":639,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["follower_id'})@manytoone(undefined",{"_index":632,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followercount",{"_index":293,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["following",{"_index":815,"title":{},"body":{"index.html":{},"license.html":{}}}],["followings.entity",{"_index":525,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["followings.entity.ts",{"_index":628,"title":{},"body":{"classes/UserFollowingEntity.html":{},"coverage.html":{}}}],["followings.entity.ts:11",{"_index":633,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followings.entity.ts:15",{"_index":631,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["followuser",{"_index":594,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["followuser(follower",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["forbid",{"_index":1193,"title":{},"body":{"license.html":{}}}],["forbiddenexception",{"_index":561,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["forbiddenexception('you",{"_index":589,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["force",{"_index":1149,"title":{},"body":{"license.html":{}}}],["form",{"_index":1063,"title":{},"body":{"license.html":{}}}],["format",{"_index":1377,"title":{},"body":{"license.html":{}}}],["forms",{"_index":1260,"title":{},"body":{"license.html":{}}}],["found",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["foundation",{"_index":870,"title":{},"body":{"license.html":{}}}],["framework",{"_index":783,"title":{},"body":{"index.html":{}}}],["free",{"_index":868,"title":{},"body":{"license.html":{}}}],["freedom",{"_index":897,"title":{},"body":{"license.html":{}}}],["fulfilling",{"_index":1178,"title":{},"body":{"license.html":{}}}],["full",{"_index":847,"title":{},"body":{"index.html":{},"license.html":{}}}],["function",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["functioning",{"_index":1351,"title":{},"body":{"license.html":{}}}],["functions",{"_index":772,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":789,"title":{},"body":{"index.html":{},"license.html":{}}}],["future",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["general",{"_index":861,"title":{},"body":{"license.html":{}}}],["generally",{"_index":1112,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1103,"title":{},"body":{"license.html":{}}}],["get('/:postid",{"_index":386,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["get('/:tag/posts",{"_index":211,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["get('/:userid",{"_index":576,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/:userid/followers",{"_index":603,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/@:username",{"_index":572,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["get('/hello",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["getallposts",{"_index":384,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallposts(authorid",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(query",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["getfolloweesofuser",{"_index":606,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getfollowersofuser",{"_index":604,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["gethashtags",{"_index":207,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["gethello",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":493,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpost",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpost(id",{"_index":463,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostdetails",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostdetails(@param('postid",{"_index":387,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["getpostdetails(postid",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsforhashtag",{"_index":208,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getpostsforhashtag(@param('tag",{"_index":222,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getpostsforhashtag(tag",{"_index":210,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["getrepositorytoken(passwordentity",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(postentity",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(sessionsentity",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(userentity",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getrepositorytoken(userfollowingentity",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getting",{"_index":774,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuserbyuserid",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyuserid(@param('userid",{"_index":577,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getuserbyuserid(userid",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyusername",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyusername(@param('username",{"_index":573,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["getuserbyusername(username",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserfromsessiontoken",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserfromsessiontoken(token",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["give",{"_index":1217,"title":{},"body":{"license.html":{}}}],["given",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["gives",{"_index":929,"title":{},"body":{"license.html":{}}}],["giving",{"_index":1225,"title":{},"body":{"license.html":{}}}],["global",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["gnu",{"_index":857,"title":{},"body":{"index.html":{},"license.html":{}}}],["goals",{"_index":975,"title":{},"body":{"license.html":{}}}],["governed",{"_index":1387,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":977,"title":{},"body":{"license.html":{}}}],["grant",{"_index":837,"title":{},"body":{"index.html":{},"license.html":{}}}],["granted",{"_index":1134,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1476,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1707,"title":{},"body":{"modules.html":{}}}],["gratis",{"_index":1293,"title":{},"body":{"license.html":{}}}],["greatest",{"_index":1673,"title":{},"body":{"license.html":{}}}],["guarantee",{"_index":902,"title":{},"body":{"license.html":{}}}],["guard",{"_index":319,"title":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":321,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"overview.html":{}}}],["hash",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash(password",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashtag",{"_index":225,"title":{},"body":{"controllers/HashtagsController.html":{},"injectables/PostsService.html":{}}}],["hashtags",{"_index":206,"title":{},"body":{"controllers/HashtagsController.html":{},"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["hashtags.controller",{"_index":227,"title":{},"body":{"modules/HashtagsModule.html":{}}}],["hashtags.length",{"_index":488,"title":{},"body":{"injectables/PostsService.html":{}}}],["hashtags/hashtags.module",{"_index":22,"title":{},"body":{"modules/ApiModule.html":{}}}],["hashtags/{tag}/posts",{"_index":854,"title":{},"body":{"index.html":{}}}],["hashtagscontroller",{"_index":204,"title":{"controllers/HashtagsController.html":{}},"body":{"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"coverage.html":{}}}],["hashtagsmodule",{"_index":8,"title":{"modules/HashtagsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/HashtagsModule.html":{},"modules.html":{},"overview.html":{}}}],["having",{"_index":1152,"title":{},"body":{"license.html":{}}}],["header",{"_index":338,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["heartened",{"_index":945,"title":{},"body":{"license.html":{}}}],["hello",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["hereafter",{"_index":1523,"title":{},"body":{"license.html":{}}}],["holder",{"_index":1446,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1396,"title":{},"body":{"license.html":{}}}],["hope",{"_index":1686,"title":{},"body":{"license.html":{}}}],["hosts",{"_index":1302,"title":{},"body":{"license.html":{}}}],["household",{"_index":1323,"title":{},"body":{"license.html":{}}}],["hstore",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["http://fsf.org",{"_index":872,"title":{},"body":{"license.html":{}}}],["http://www.gnu.org/licenses",{"_index":1703,"title":{},"body":{"license.html":{}}}],["https://github.com/scaleracademy/open",{"_index":797,"title":{},"body":{"index.html":{}}}],["id",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"injectables/UsersService.html":{}}}],["idea",{"_index":787,"title":{},"body":{"index.html":{}}}],["identifiable",{"_index":1550,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["images",{"_index":251,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["implement",{"_index":473,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["implementation",{"_index":469,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["implements",{"_index":344,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["implied",{"_index":1577,"title":{},"body":{"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["importing",{"_index":1514,"title":{},"body":{"license.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["impose",{"_index":1425,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":1581,"title":{},"body":{"license.html":{}}}],["improvements",{"_index":937,"title":{},"body":{"license.html":{}}}],["inability",{"_index":1647,"title":{},"body":{"license.html":{}}}],["inaccurate",{"_index":1650,"title":{},"body":{"license.html":{}}}],["inc",{"_index":871,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1644,"title":{},"body":{"license.html":{}}}],["include",{"_index":1082,"title":{},"body":{"license.html":{}}}],["included",{"_index":1084,"title":{},"body":{"license.html":{}}}],["includes",{"_index":1025,"title":{},"body":{"license.html":{}}}],["including",{"_index":1105,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":1257,"title":{},"body":{"license.html":{}}}],["incorporate",{"_index":943,"title":{},"body":{"license.html":{}}}],["incorporated",{"_index":1601,"title":{},"body":{"license.html":{}}}],["incorporation",{"_index":1325,"title":{},"body":{"license.html":{}}}],["indemnification",{"_index":1421,"title":{},"body":{"license.html":{}}}],["independent",{"_index":1245,"title":{},"body":{"license.html":{}}}],["index",{"_index":33,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":1480,"title":{},"body":{"license.html":{}}}],["indicating",{"_index":1434,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1255,"title":{},"body":{"license.html":{}}}],["individuals",{"_index":1001,"title":{},"body":{"license.html":{}}}],["industrial",{"_index":1341,"title":{},"body":{"license.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["inform",{"_index":1308,"title":{},"body":{"license.html":{}}}],["information",{"_index":790,"title":{},"body":{"index.html":{},"license.html":{}}}],["infringe",{"_index":1478,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1511,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1017,"title":{},"body":{"license.html":{}}}],["inherited",{"_index":357,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["initial",{"_index":810,"title":{},"body":{"index.html":{}}}],["initiate",{"_index":1504,"title":{},"body":{"license.html":{}}}],["inject",{"_index":329,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(passwordentity",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(postentity",{"_index":467,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(sessionsentity",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository(userentity",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(userfollowingentity",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":1104,"title":{},"body":{"license.html":{}}}],["installation",{"_index":822,"title":{},"body":{"index.html":{},"license.html":{}}}],["installed",{"_index":1364,"title":{},"body":{"license.html":{}}}],["installrunning",{"_index":824,"title":{},"body":{"index.html":{}}}],["intact",{"_index":1210,"title":{},"body":{"license.html":{}}}],["intended",{"_index":901,"title":{},"body":{"license.html":{}}}],["intention",{"_index":1198,"title":{},"body":{"license.html":{}}}],["interact",{"_index":1692,"title":{},"body":{"license.html":{}}}],["interacting",{"_index":1595,"title":{},"body":{"license.html":{}}}],["interaction",{"_index":1034,"title":{},"body":{"license.html":{}}}],["interactive",{"_index":1038,"title":{},"body":{"license.html":{}}}],["interchange",{"_index":1272,"title":{},"body":{"license.html":{}}}],["interest",{"_index":1497,"title":{},"body":{"license.html":{}}}],["interface",{"_index":1039,"title":{},"body":{"license.html":{}}}],["interfaces",{"_index":1071,"title":{},"body":{"license.html":{}}}],["interfered",{"_index":1353,"title":{},"body":{"license.html":{}}}],["interpretation",{"_index":1659,"title":{},"body":{"license.html":{}}}],["interpreter",{"_index":1100,"title":{},"body":{"license.html":{}}}],["intimate",{"_index":1123,"title":{},"body":{"license.html":{}}}],["invalidate",{"_index":1238,"title":{},"body":{"license.html":{}}}],["irrevocable",{"_index":1136,"title":{},"body":{"license.html":{}}}],["item",{"_index":1059,"title":{},"body":{"license.html":{}}}],["itself",{"_index":1370,"title":{},"body":{"license.html":{}}}],["jam",{"_index":807,"title":{},"body":{"index.html":{}}}],["john",{"_index":289,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["johndoe",{"_index":298,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["joincolumn",{"_index":240,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["joincolumn({name",{"_index":353,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["keep",{"_index":1209,"title":{},"body":{"license.html":{}}}],["kernel",{"_index":1093,"title":{},"body":{"license.html":{}}}],["key",{"_index":1380,"title":{},"body":{"license.html":{}}}],["keys",{"_index":1346,"title":{},"body":{"license.html":{}}}],["kind",{"_index":1030,"title":{},"body":{"license.html":{}}}],["kinds",{"_index":884,"title":{},"body":{"license.html":{}}}],["know",{"_index":919,"title":{},"body":{"license.html":{}}}],["knowingly",{"_index":1540,"title":{},"body":{"license.html":{}}}],["knowledge",{"_index":1547,"title":{},"body":{"license.html":{}}}],["language",{"_index":1075,"title":{},"body":{"license.html":{}}}],["larger",{"_index":1249,"title":{},"body":{"license.html":{}}}],["later",{"_index":1616,"title":{},"body":{"license.html":{}}}],["law",{"_index":1019,"title":{},"body":{"license.html":{}}}],["laws",{"_index":989,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1509,"title":{},"body":{"license.html":{}}}],["lazy",{"_index":544,"title":{},"body":{"classes/SessionsEntity.html":{},"classes/UserEntity.html":{}}}],["leads",{"_index":1695,"title":{},"body":{"license.html":{}}}],["leftjoinandselect('origpost.author",{"_index":481,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.author",{"_index":478,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.origpost",{"_index":479,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('posts.replyto",{"_index":483,"title":{},"body":{"injectables/PostsService.html":{}}}],["leftjoinandselect('replyto.author",{"_index":485,"title":{},"body":{"injectables/PostsService.html":{}}}],["legal",{"_index":930,"title":{},"body":{"license.html":{}}}],["length",{"_index":246,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["letting",{"_index":956,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1399,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1016,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1080,"title":{},"body":{"license.html":{}}}],["library",{"_index":1316,"title":{},"body":{"license.html":{}}}],["license",{"_index":855,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":995,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":997,"title":{},"body":{"license.html":{}}}],["licensees",{"_index":999,"title":{},"body":{"license.html":{}}}],["licenses",{"_index":893,"title":{},"body":{"license.html":{}}}],["licensing",{"_index":1482,"title":{},"body":{"license.html":{}}}],["licensors",{"_index":1413,"title":{},"body":{"license.html":{}}}],["like_count",{"_index":255,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["likecount",{"_index":257,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["liked",{"_index":400,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["likepost",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{}}}],["likepost(@param('postid",{"_index":399,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["likepost(postid",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["likewise",{"_index":1474,"title":{},"body":{"license.html":{}}}],["limit",{"_index":472,"title":{},"body":{"injectables/PostsService.html":{},"license.html":{}}}],["limit(100",{"_index":492,"title":{},"body":{"injectables/PostsService.html":{}}}],["limitation",{"_index":1640,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1627,"title":{},"body":{"license.html":{}}}],["limiting",{"_index":1398,"title":{},"body":{"license.html":{}}}],["line",{"_index":1683,"title":{},"body":{"license.html":{}}}],["link",{"_index":1602,"title":{},"body":{"license.html":{}}}],["linked",{"_index":1120,"title":{},"body":{"license.html":{}}}],["list",{"_index":1054,"title":{},"body":{"license.html":{}}}],["litigation",{"_index":1505,"title":{},"body":{"license.html":{}}}],["local",{"_index":1660,"title":{},"body":{"license.html":{}}}],["logger",{"_index":532,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["logging",{"_index":535,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["logic",{"_index":220,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["login",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["login(body",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginrequestbody",{"_index":71,"title":{"classes/LoginRequestBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["loginresponsebody",{"_index":90,"title":{"classes/LoginResponseBody.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["loginresponsebody(session.id",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["loginresponsebody})@post('/login",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["long",{"_index":1147,"title":{},"body":{"license.html":{}}}],["loss",{"_index":1648,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1651,"title":{},"body":{"license.html":{}}}],["machine",{"_index":1262,"title":{},"body":{"license.html":{}}}],["made",{"_index":938,"title":{},"body":{"license.html":{}}}],["mail",{"_index":1691,"title":{},"body":{"license.html":{}}}],["maintain",{"_index":1297,"title":{},"body":{"license.html":{}}}],["major",{"_index":1087,"title":{},"body":{"license.html":{}}}],["make",{"_index":905,"title":{},"body":{"license.html":{}}}],["makes",{"_index":1168,"title":{},"body":{"license.html":{}}}],["making",{"_index":954,"title":{},"body":{"license.html":{}}}],["manner",{"_index":1524,"title":{},"body":{"license.html":{}}}],["many",{"_index":944,"title":{},"body":{"license.html":{}}}],["manytoone",{"_index":241,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["manytoone(undefined)@joincolumn({name",{"_index":406,"title":{},"body":{"classes/PostEntity.html":{}}}],["march",{"_index":1574,"title":{},"body":{"license.html":{}}}],["marked",{"_index":1409,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1419,"title":{},"body":{"license.html":{}}}],["masks",{"_index":992,"title":{},"body":{"license.html":{}}}],["matching",{"_index":28,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchpasshash",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["matchpasshash(password",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["material",{"_index":1156,"title":{},"body":{"license.html":{}}}],["materially",{"_index":1371,"title":{},"body":{"license.html":{}}}],["meaning",{"_index":1429,"title":{},"body":{"license.html":{}}}],["means",{"_index":988,"title":{},"body":{"license.html":{}}}],["measure",{"_index":1177,"title":{},"body":{"license.html":{}}}],["measures",{"_index":1190,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1205,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1223,"title":{},"body":{"license.html":{}}}],["meets",{"_index":1060,"title":{},"body":{"license.html":{}}}],["mention",{"_index":232,"title":{"classes/Mention.html":{}},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["mentions",{"_index":260,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["menu",{"_index":1057,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1628,"title":{},"body":{"license.html":{}}}],["mere",{"_index":1033,"title":{},"body":{"license.html":{}}}],["merging",{"_index":1493,"title":{},"body":{"license.html":{}}}],["met",{"_index":1138,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["miscellaneous",{"_index":771,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["misrepresentation",{"_index":1407,"title":{},"body":{"license.html":{}}}],["mockpasswordrepositoryprovider",{"_index":275,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostsmodule",{"_index":265,"title":{"modules/MockPostsModule.html":{}},"body":{"modules/MockPostsModule.html":{},"modules.html":{},"overview.html":{}}}],["mockpostsrepository",{"_index":278,"title":{"classes/MockPostsRepository.html":{}},"body":{"classes/MockPostsRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockpostsrepositoryprovider",{"_index":274,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocksessionrepositoryprovider",{"_index":276,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockuser",{"_index":286,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["mockuserfollowingsrepositoryprovider",{"_index":735,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockusersrepository",{"_index":281,"title":{"classes/MockUsersRepository.html":{}},"body":{"classes/MockUsersRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockusersrepositoryprovider",{"_index":273,"title":{},"body":{"modules/MockPostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":829,"title":{},"body":{"index.html":{},"license.html":{}}}],["model",{"_index":1279,"title":{},"body":{"license.html":{}}}],["modification",{"_index":985,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":1064,"title":{},"body":{"license.html":{}}}],["modified",{"_index":955,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":1228,"title":{},"body":{"license.html":{}}}],["modify",{"_index":933,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1023,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HashtagsModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moo",{"_index":776,"title":{},"body":{"index.html":{}}}],["mooadmin",{"_index":528,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["mooadmin;progress",{"_index":839,"title":{},"body":{"index.html":{}}}],["moobaseentity",{"_index":236,"title":{"classes/MooBaseEntity.html":{}},"body":{"classes/Mention.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"coverage.html":{}}}],["moobaseentity:12",{"_index":359,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["moobaseentity:15",{"_index":358,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["moobaseentity:18",{"_index":360,"title":{},"body":{"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["moodb",{"_index":530,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["moodb_test",{"_index":538,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["moopass",{"_index":529,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["more",{"_index":1281,"title":{},"body":{"license.html":{}}}],["moreover",{"_index":1459,"title":{},"body":{"license.html":{}}}],["name",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["names",{"_index":1412,"title":{},"body":{"license.html":{}}}],["nature",{"_index":1246,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":1636,"title":{},"body":{"license.html":{}}}],["need",{"_index":1129,"title":{},"body":{"license.html":{}}}],["needed",{"_index":1102,"title":{},"body":{"license.html":{}}}],["nest",{"_index":782,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["network",{"_index":891,"title":{},"body":{"license.html":{}}}],["new",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["newfollow",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["newfollow.followee",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword.password",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpassword.userid",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["newpost",{"_index":509,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.author",{"_index":511,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.origpost",{"_index":514,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.replyto",{"_index":516,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.text",{"_index":510,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuserdetails",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.avatar",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.bio",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuserdetails.name",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1300,"title":{},"body":{"license.html":{}}}],["nodejs",{"_index":784,"title":{},"body":{"index.html":{}}}],["non",{"_index":1066,"title":{},"body":{"license.html":{}}}],["noncommercially",{"_index":1287,"title":{},"body":{"license.html":{}}}],["normal",{"_index":1085,"title":{},"body":{"license.html":{}}}],["normally",{"_index":1321,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('no",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('original",{"_index":513,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":575,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('username",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["nothing",{"_index":1475,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1048,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1042,"title":{},"body":{"license.html":{}}}],["notifies",{"_index":1460,"title":{},"body":{"license.html":{}}}],["notify",{"_index":1454,"title":{},"body":{"license.html":{}}}],["notwithstanding",{"_index":1393,"title":{},"body":{"license.html":{}}}],["november",{"_index":865,"title":{},"body":{"license.html":{}}}],["npm",{"_index":823,"title":{},"body":{"index.html":{}}}],["null",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":248,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["number",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{},"license.html":{}}}],["numbered",{"_index":1615,"title":{},"body":{"license.html":{}}}],["object",{"_index":1065,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["obligate",{"_index":1588,"title":{},"body":{"license.html":{}}}],["obligated",{"_index":1304,"title":{},"body":{"license.html":{}}}],["obligations",{"_index":1179,"title":{},"body":{"license.html":{}}}],["occasionally",{"_index":1286,"title":{},"body":{"license.html":{}}}],["occurring",{"_index":1472,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":1354,"title":{},"body":{"license.html":{}}}],["offer",{"_index":928,"title":{},"body":{"license.html":{}}}],["offered",{"_index":1310,"title":{},"body":{"license.html":{}}}],["offering",{"_index":1290,"title":{},"body":{"license.html":{}}}],["official",{"_index":1068,"title":{},"body":{"license.html":{}}}],["older",{"_index":970,"title":{},"body":{"license.html":{}}}],["one",{"_index":1076,"title":{},"body":{"license.html":{}}}],["onetoone",{"_index":242,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["onetoone((type",{"_index":626,"title":{},"body":{"classes/UserEntity.html":{}}}],["onetoone(undefined",{"_index":619,"title":{},"body":{"classes/UserEntity.html":{}}}],["onetoone(undefined)@joincolumn({name",{"_index":414,"title":{},"body":{"classes/PostEntity.html":{}}}],["operate",{"_index":1654,"title":{},"body":{"license.html":{}}}],["operated",{"_index":1294,"title":{},"body":{"license.html":{}}}],["operating",{"_index":1096,"title":{},"body":{"license.html":{}}}],["operation",{"_index":1199,"title":{},"body":{"license.html":{}}}],["operator",{"_index":964,"title":{},"body":{"license.html":{}}}],["opportunity",{"_index":1597,"title":{},"body":{"license.html":{}}}],["option",{"_index":1389,"title":{},"body":{"license.html":{}}}],["optional",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionalauthguard",{"_index":320,"title":{"guards/OptionalAuthGuard.html":{}},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["options",{"_index":1056,"title":{},"body":{"license.html":{}}}],["order",{"_index":1470,"title":{},"body":{"license.html":{}}}],["orderby('posts.created_at",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{}}}],["organization",{"_index":1489,"title":{},"body":{"license.html":{}}}],["organizations",{"_index":1002,"title":{},"body":{"license.html":{}}}],["orig_post_id",{"_index":261,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["origin",{"_index":1408,"title":{},"body":{"license.html":{}}}],["original",{"_index":1410,"title":{},"body":{"license.html":{}}}],["originalpostid",{"_index":364,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["origpost",{"_index":262,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{}}}],["origpost.author",{"_index":496,"title":{},"body":{"injectables/PostsService.html":{}}}],["origpostauthor",{"_index":482,"title":{},"body":{"injectables/PostsService.html":{}}}],["origposts",{"_index":846,"title":{},"body":{"index.html":{}}}],["others",{"_index":1150,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1148,"title":{},"body":{"license.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":1142,"title":{},"body":{"license.html":{}}}],["outside",{"_index":1162,"title":{},"body":{"license.html":{}}}],["overview",{"_index":1708,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1520,"title":{},"body":{"license.html":{}}}],["package",{"_index":747,"title":{"dependencies.html":{}},"body":{}}],["packaged",{"_index":1236,"title":{},"body":{"license.html":{}}}],["packaging",{"_index":1086,"title":{},"body":{"license.html":{}}}],["pagination",{"_index":470,"title":{},"body":{"injectables/PostsService.html":{}}}],["pairing",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["paper",{"_index":1690,"title":{},"body":{"license.html":{}}}],["paragraph",{"_index":1443,"title":{},"body":{"license.html":{}}}],["paragraphs",{"_index":1531,"title":{},"body":{"license.html":{}}}],["param",{"_index":214,"title":{},"body":{"controllers/HashtagsController.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":586,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parody",{"_index":788,"title":{},"body":{"index.html":{}}}],["part",{"_index":1004,"title":{},"body":{"license.html":{}}}],["partial",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["particular",{"_index":1073,"title":{},"body":{"license.html":{}}}],["parties",{"_index":1032,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1128,"title":{},"body":{"license.html":{}}}],["party",{"_index":1295,"title":{},"body":{"license.html":{}}}],["party's",{"_index":1495,"title":{},"body":{"license.html":{}}}],["passmatch",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["passtohash",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["passtohash(password",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PasswordEntity.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["password.user",{"_index":627,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_salt_rounds",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordentity",{"_index":117,"title":{"classes/PasswordEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["passwordrepo",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords.entity",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["patch",{"_index":562,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["patch('/:userid",{"_index":583,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["patent",{"_index":1442,"title":{},"body":{"license.html":{}}}],["patents",{"_index":1515,"title":{},"body":{"license.html":{}}}],["payment",{"_index":1567,"title":{},"body":{"license.html":{}}}],["peer",{"_index":1306,"title":{},"body":{"license.html":{}}}],["peers",{"_index":1309,"title":{},"body":{"license.html":{}}}],["performance",{"_index":1632,"title":{},"body":{"license.html":{}}}],["performing",{"_index":1113,"title":{},"body":{"license.html":{}}}],["permanently",{"_index":1452,"title":{},"body":{"license.html":{}}}],["permission",{"_index":931,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1133,"title":{},"body":{"license.html":{}}}],["permissive",{"_index":1212,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1256,"title":{},"body":{"license.html":{}}}],["permits",{"_index":953,"title":{},"body":{"license.html":{}}}],["permitted",{"_index":874,"title":{},"body":{"license.html":{}}}],["perpetuity",{"_index":1359,"title":{},"body":{"license.html":{}}}],["personal",{"_index":1319,"title":{},"body":{"license.html":{}}}],["pertinent",{"_index":1586,"title":{},"body":{"license.html":{}}}],["pg",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["physical",{"_index":1266,"title":{},"body":{"license.html":{}}}],["physically",{"_index":1284,"title":{},"body":{"license.html":{}}}],["pieces",{"_index":917,"title":{},"body":{"license.html":{}}}],["place",{"_index":1292,"title":{},"body":{"license.html":{}}}],["please",{"_index":813,"title":{},"body":{"index.html":{}}}],["plus",{"_index":1499,"title":{},"body":{"license.html":{}}}],["pointer",{"_index":1684,"title":{},"body":{"license.html":{}}}],["portion",{"_index":1313,"title":{},"body":{"license.html":{}}}],["possesses",{"_index":1280,"title":{},"body":{"license.html":{}}}],["possession",{"_index":1233,"title":{},"body":{"license.html":{}}}],["possibility",{"_index":1657,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1674,"title":{},"body":{"license.html":{}}}],["post",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["post('/login",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["post.originalpostid",{"_index":394,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["post.replytopostid",{"_index":395,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["post.text",{"_index":504,"title":{},"body":{"injectables/PostsService.html":{}}}],["postcreaterequestbody",{"_index":362,"title":{"classes/PostCreateRequestBody.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postdetailsqueryparams",{"_index":379,"title":{"classes/PostDetailsQueryParams.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["postentity",{"_index":244,"title":{"classes/PostEntity.html":{}},"body":{"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"coverage.html":{}}}],["postgres",{"_index":527,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["postgresql",{"_index":786,"title":{},"body":{"index.html":{}}}],["postid",{"_index":388,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["posts",{"_index":224,"title":{},"body":{"controllers/HashtagsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["posts.controller",{"_index":443,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.entity",{"_index":376,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["posts.repository",{"_index":466,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts.service",{"_index":378,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":23,"title":{},"body":{"modules/ApiModule.html":{}}}],["posts/{postid",{"_index":850,"title":{},"body":{"index.html":{}}}],["posts/{postid}/like",{"_index":853,"title":{},"body":{"index.html":{}}}],["postscontroller",{"_index":383,"title":{"controllers/PostsController.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":9,"title":{"modules/PostsModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":445,"title":{"classes/PostsRepository.html":{}},"body":{"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postsservice",{"_index":377,"title":{"injectables/PostsService.html":{}},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["power",{"_index":1192,"title":{},"body":{"license.html":{}}}],["practical",{"_index":894,"title":{},"body":{"license.html":{}}}],["practice",{"_index":1537,"title":{},"body":{"license.html":{}}}],["preamble",{"_index":882,"title":{},"body":{"license.html":{}}}],["precise",{"_index":980,"title":{},"body":{"license.html":{}}}],["predecessor",{"_index":1496,"title":{},"body":{"license.html":{}}}],["preferred",{"_index":1062,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HashtagsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["present",{"_index":1607,"title":{},"body":{"license.html":{}}}],["presents",{"_index":1053,"title":{},"body":{"license.html":{}}}],["preservation",{"_index":1403,"title":{},"body":{"license.html":{}}}],["prevented",{"_index":1352,"title":{},"body":{"license.html":{}}}],["previous",{"_index":1498,"title":{},"body":{"license.html":{}}}],["price",{"_index":910,"title":{},"body":{"license.html":{}}}],["primarily",{"_index":1569,"title":{},"body":{"license.html":{}}}],["primarygeneratedcolumn",{"_index":316,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":310,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["prior",{"_index":1455,"title":{},"body":{"license.html":{}}}],["private",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["privileges",{"_index":838,"title":{},"body":{"index.html":{}}}],["problems",{"_index":1611,"title":{},"body":{"license.html":{}}}],["procedures",{"_index":1345,"title":{},"body":{"license.html":{}}}],["procuring",{"_index":1557,"title":{},"body":{"license.html":{}}}],["proddbmodule",{"_index":52,"title":{"modules/ProdDbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules.html":{},"overview.html":{}}}],["produce",{"_index":1099,"title":{},"body":{"license.html":{}}}],["product",{"_index":1267,"title":{},"body":{"license.html":{}}}],["production",{"_index":521,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"index.html":{}}}],["products",{"_index":1570,"title":{},"body":{"license.html":{}}}],["program",{"_index":904,"title":{},"body":{"license.html":{}}}],["program's",{"_index":1204,"title":{},"body":{"license.html":{}}}],["programmer",{"_index":1700,"title":{},"body":{"license.html":{}}}],["programming",{"_index":1074,"title":{},"body":{"license.html":{}}}],["programs",{"_index":918,"title":{},"body":{"license.html":{}}}],["prohibit",{"_index":1160,"title":{},"body":{"license.html":{}}}],["prohibiting",{"_index":1188,"title":{},"body":{"license.html":{}}}],["prohibits",{"_index":1563,"title":{},"body":{"license.html":{}}}],["project",{"_index":811,"title":{},"body":{"index.html":{}}}],["projects/discussions/81",{"_index":798,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":1058,"title":{},"body":{"license.html":{}}}],["prominently",{"_index":1045,"title":{},"body":{"license.html":{}}}],["promise",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["propagate",{"_index":1012,"title":{},"body":{"license.html":{}}}],["propagating",{"_index":1479,"title":{},"body":{"license.html":{}}}],["propagation",{"_index":1024,"title":{},"body":{"license.html":{}}}],["properties",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{}}}],["property",{"_index":1320,"title":{},"body":{"license.html":{}}}],["protect",{"_index":922,"title":{},"body":{"license.html":{}}}],["protected",{"_index":331,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["protecting",{"_index":1170,"title":{},"body":{"license.html":{}}}],["protection",{"_index":1220,"title":{},"body":{"license.html":{}}}],["protocols",{"_index":1376,"title":{},"body":{"license.html":{}}}],["prototype",{"_index":806,"title":{},"body":{"index.html":{}}}],["prove",{"_index":1633,"title":{},"body":{"license.html":{}}}],["provide",{"_index":965,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":1052,"title":{},"body":{"license.html":{}}}],["providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":1693,"title":{},"body":{"license.html":{}}}],["providing",{"_index":1598,"title":{},"body":{"license.html":{}}}],["provision",{"_index":1394,"title":{},"body":{"license.html":{}}}],["provisionally",{"_index":1448,"title":{},"body":{"license.html":{}}}],["proxy",{"_index":1620,"title":{},"body":{"license.html":{}}}],["proxy's",{"_index":1622,"title":{},"body":{"license.html":{}}}],["public",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["publicity",{"_index":1411,"title":{},"body":{"license.html":{}}}],["publicly",{"_index":968,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1208,"title":{},"body":{"license.html":{}}}],["published",{"_index":972,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1110,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":537,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"license.html":{}}}],["pursuant",{"_index":1553,"title":{},"body":{"license.html":{}}}],["put",{"_index":371,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["put('/:postid/like",{"_index":398,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["put('/:userid/follow",{"_index":593,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["put('/:userid/followees",{"_index":605,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["qualify",{"_index":1466,"title":{},"body":{"license.html":{}}}],["quality",{"_index":1631,"title":{},"body":{"license.html":{}}}],["query",{"_index":372,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["querybuilder",{"_index":475,"title":{},"body":{"injectables/PostsService.html":{}}}],["querybuilder.where(`posts.author",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{}}}],["quote",{"_index":852,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1263,"title":{},"body":{"license.html":{}}}],["readily",{"_index":1542,"title":{},"body":{"license.html":{}}}],["reading",{"_index":1382,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["reason",{"_index":1551,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1282,"title":{},"body":{"license.html":{}}}],["receipt",{"_index":1464,"title":{},"body":{"license.html":{}}}],["receive",{"_index":913,"title":{},"body":{"license.html":{}}}],["received",{"_index":1240,"title":{},"body":{"license.html":{}}}],["receives",{"_index":1484,"title":{},"body":{"license.html":{}}}],["receiving",{"_index":1559,"title":{},"body":{"license.html":{}}}],["recipient",{"_index":1358,"title":{},"body":{"license.html":{}}}],["recipient's",{"_index":1549,"title":{},"body":{"license.html":{}}}],["recipients",{"_index":1000,"title":{},"body":{"license.html":{}}}],["recognized",{"_index":1069,"title":{},"body":{"license.html":{}}}],["redistribute",{"_index":1677,"title":{},"body":{"license.html":{}}}],["referring",{"_index":909,"title":{},"body":{"license.html":{}}}],["refers",{"_index":987,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["refrain",{"_index":1591,"title":{},"body":{"license.html":{}}}],["regard",{"_index":1388,"title":{},"body":{"license.html":{}}}],["regardless",{"_index":1235,"title":{},"body":{"license.html":{}}}],["regenerate",{"_index":1130,"title":{},"body":{"license.html":{}}}],["reinstated",{"_index":1447,"title":{},"body":{"license.html":{}}}],["relations",{"_index":495,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{},"license.html":{}}}],["released",{"_index":978,"title":{},"body":{"license.html":{}}}],["releasing",{"_index":959,"title":{},"body":{"license.html":{}}}],["relevant",{"_index":1226,"title":{},"body":{"license.html":{}}}],["relicensing",{"_index":979,"title":{},"body":{"license.html":{}}}],["relying",{"_index":1541,"title":{},"body":{"license.html":{}}}],["remain",{"_index":1303,"title":{},"body":{"license.html":{}}}],["remains",{"_index":907,"title":{},"body":{"license.html":{}}}],["remote",{"_index":1594,"title":{},"body":{"license.html":{}}}],["remotely",{"_index":1596,"title":{},"body":{"license.html":{}}}],["removal",{"_index":1391,"title":{},"body":{"license.html":{}}}],["remove",{"_index":1390,"title":{},"body":{"license.html":{}}}],["rendered",{"_index":1649,"title":{},"body":{"license.html":{}}}],["repair",{"_index":1638,"title":{},"body":{"license.html":{}}}],["reply",{"_index":508,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["reply_to_id",{"_index":263,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["replyto",{"_index":264,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["replyto.author",{"_index":497,"title":{},"body":{"injectables/PostsService.html":{}}}],["replytoauthor",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{}}}],["replytopostid",{"_index":365,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["repository",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/PostsRepository.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["repost",{"_index":507,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["repost_count",{"_index":258,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["repostcount",{"_index":259,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{}}}],["represent",{"_index":1343,"title":{},"body":{"license.html":{}}}],["request",{"_index":333,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["request.headers.authorization.split",{"_index":341,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["request.headers.authorization.startswith('bearer",{"_index":339,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["request.user",{"_index":343,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"miscellaneous/variables.html":{}}}],["request?.headers?.authorization",{"_index":335,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["require",{"_index":1122,"title":{},"body":{"license.html":{}}}],["required",{"_index":1347,"title":{},"body":{"license.html":{}}}],["requiredauthguard",{"_index":269,"title":{"guards/RequiredAuthGuard.html":{}},"body":{"modules/MockPostsModule.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["requirement",{"_index":1227,"title":{},"body":{"license.html":{}}}],["requirements",{"_index":794,"title":{},"body":{"index.html":{},"license.html":{}}}],["requires",{"_index":963,"title":{},"body":{"license.html":{}}}],["requiring",{"_index":1006,"title":{},"body":{"license.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolved",{"_index":1330,"title":{},"body":{"license.html":{}}}],["respect",{"_index":1196,"title":{},"body":{"license.html":{}}}],["response",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["responsible",{"_index":1486,"title":{},"body":{"license.html":{}}}],["restricting",{"_index":1189,"title":{},"body":{"license.html":{}}}],["restriction",{"_index":1431,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1427,"title":{},"body":{"license.html":{}}}],["result",{"_index":950,"title":{},"body":{"license.html":{}}}],["resulting",{"_index":947,"title":{},"body":{"license.html":{}}}],["results",{"_index":27,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":1362,"title":{},"body":{"license.html":{}}}],["return",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reviewing",{"_index":1663,"title":{},"body":{"license.html":{}}}],["revised",{"_index":1605,"title":{},"body":{"license.html":{}}}],["right",{"_index":1356,"title":{},"body":{"license.html":{}}}],["rights",{"_index":923,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["risk",{"_index":1630,"title":{},"body":{"license.html":{}}}],["rom",{"_index":1365,"title":{},"body":{"license.html":{}}}],["row",{"_index":634,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["royalty",{"_index":1503,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1375,"title":{},"body":{"license.html":{}}}],["run",{"_index":827,"title":{},"body":{"index.html":{},"license.html":{}}}],["running",{"_index":966,"title":{},"body":{"license.html":{}}}],["runs",{"_index":1097,"title":{},"body":{"license.html":{}}}],["rxjs",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["safest",{"_index":1679,"title":{},"body":{"license.html":{}}}],["sale",{"_index":1513,"title":{},"body":{"license.html":{}}}],["same",{"_index":635,"title":{},"body":{"classes/UserFollowingEntity.html":{},"license.html":{}}}],["satisfy",{"_index":1305,"title":{},"body":{"license.html":{}}}],["savedpost",{"_index":517,"title":{},"body":{"injectables/PostsService.html":{}}}],["savedsession",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["saying",{"_index":1301,"title":{},"body":{"license.html":{}}}],["schema",{"_index":793,"title":{},"body":{"index.html":{}}}],["school",{"_index":1701,"title":{},"body":{"license.html":{}}}],["scope",{"_index":1562,"title":{},"body":{"license.html":{}}}],["scratch",{"_index":819,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":1106,"title":{},"body":{"license.html":{}}}],["search",{"_index":848,"title":{},"body":{"index.html":{}}}],["secondarily",{"_index":1015,"title":{},"body":{"license.html":{}}}],["secondary",{"_index":934,"title":{},"body":{"license.html":{}}}],["section",{"_index":1167,"title":{},"body":{"license.html":{}}}],["sections",{"_index":1261,"title":{},"body":{"license.html":{}}}],["see",{"_index":809,"title":{},"body":{"index.html":{},"license.html":{}}}],["sell",{"_index":1529,"title":{},"body":{"license.html":{}}}],["selling",{"_index":1512,"title":{},"body":{"license.html":{}}}],["semiconductor",{"_index":991,"title":{},"body":{"license.html":{}}}],["separable",{"_index":1312,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1244,"title":{},"body":{"license.html":{}}}],["separately",{"_index":1239,"title":{},"body":{"license.html":{}}}],["server",{"_index":892,"title":{},"body":{"license.html":{}}}],["servers",{"_index":949,"title":{},"body":{"license.html":{}}}],["serves",{"_index":1090,"title":{},"body":{"license.html":{}}}],["service",{"_index":1367,"title":{},"body":{"license.html":{}}}],["servicing",{"_index":1637,"title":{},"body":{"license.html":{}}}],["session",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["session.user",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["session.userid",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionrepo",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.entity",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessionsentity",{"_index":119,"title":{"classes/SessionsEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"coverage.html":{}}}],["set",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["shall",{"_index":1173,"title":{},"body":{"license.html":{}}}],["share",{"_index":898,"title":{},"body":{"license.html":{}}}],["shared",{"_index":1118,"title":{},"body":{"license.html":{}}}],["show",{"_index":223,"title":{},"body":{"controllers/HashtagsController.html":{},"injectables/UsersService.html":{}}}],["sign",{"_index":1702,"title":{},"body":{"license.html":{}}}],["significant",{"_index":1344,"title":{},"body":{"license.html":{}}}],["similar",{"_index":974,"title":{},"body":{"license.html":{}}}],["simple",{"_index":851,"title":{},"body":{"index.html":{}}}],["simultaneously",{"_index":1585,"title":{},"body":{"license.html":{}}}],["single",{"_index":1555,"title":{},"body":{"license.html":{}}}],["size",{"_index":471,"title":{},"body":{"injectables/PostsService.html":{}}}],["software",{"_index":869,"title":{},"body":{"license.html":{}}}],["sold",{"_index":1324,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1151,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1164,"title":{},"body":{"license.html":{}}}],["solutions",{"_index":1697,"title":{},"body":{"license.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/ApiModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"modules/HashtagsModule.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"modules/MockPostsModule.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsRepository.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{},"license.html":{}}}],["spare",{"_index":1277,"title":{},"body":{"license.html":{}}}],["speak",{"_index":908,"title":{},"body":{"license.html":{}}}],["special",{"_index":1379,"title":{},"body":{"license.html":{}}}],["specific",{"_index":1095,"title":{},"body":{"license.html":{}}}],["specifically",{"_index":886,"title":{},"body":{"license.html":{}}}],["specified",{"_index":1072,"title":{},"body":{"license.html":{}}}],["specifies",{"_index":1614,"title":{},"body":{"license.html":{}}}],["specify",{"_index":1618,"title":{},"body":{"license.html":{}}}],["spirit",{"_index":1606,"title":{},"body":{"license.html":{}}}],["src/.../auth.decorator.ts",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mock.providers.ts",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/api.module.ts",{"_index":17,"title":{},"body":{"modules/ApiModule.html":{}}}],["src/app.controller.ts",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":231,"title":{},"body":{"classes/LoginResponseBody.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:6",{"_index":230,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/auth.controller.ts:7",{"_index":229,"title":{},"body":{"classes/LoginRequestBody.html":{}}}],["src/auth/auth.decorator",{"_index":375,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.decorator.ts",{"_index":726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.guard",{"_index":271,"title":{},"body":{"modules/MockPostsModule.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["src/auth/auth.guard.ts",{"_index":322,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:10",{"_index":550,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":551,"title":{},"body":{"classes/TokenAuthorizer.html":{}}}],["src/auth/auth.guard.ts:32",{"_index":327,"title":{},"body":{"guards/OptionalAuthGuard.html":{}}}],["src/auth/auth.guard.ts:43",{"_index":541,"title":{},"body":{"guards/RequiredAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":272,"title":{},"body":{"modules/MockPostsModule.html":{},"injectables/UsersService.html":{}}}],["src/auth/auth.service.ts",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:44",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:63",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:75",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/passwords.entity",{"_index":285,"title":{},"body":{"classes/MockUsersRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["src/auth/passwords.entity.ts",{"_index":349,"title":{},"body":{"classes/PasswordEntity.html":{},"coverage.html":{}}}],["src/auth/passwords.entity.ts:12",{"_index":355,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/passwords.entity.ts:15",{"_index":352,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/passwords.entity.ts:8",{"_index":356,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["src/auth/sessions.entity",{"_index":522,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/auth/sessions.entity.ts",{"_index":542,"title":{},"body":{"classes/SessionsEntity.html":{},"coverage.html":{}}}],["src/auth/sessions.entity.ts:12",{"_index":545,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["src/auth/sessions.entity.ts:8",{"_index":546,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["src/commons/base.entity",{"_index":237,"title":{},"body":{"classes/Mention.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["src/commons/base.entity.ts",{"_index":300,"title":{},"body":{"classes/MooBaseEntity.html":{},"coverage.html":{}}}],["src/commons/base.entity.ts:12",{"_index":311,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["src/commons/base.entity.ts:15",{"_index":309,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["src/commons/base.entity.ts:18",{"_index":314,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["src/commons/db.module.ts",{"_index":519,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/commons/mocks/mock.providers",{"_index":277,"title":{},"body":{"modules/MockPostsModule.html":{}}}],["src/commons/mocks/mock.providers.ts",{"_index":734,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/commons/mocks/posts.repository.mock.ts",{"_index":279,"title":{},"body":{"classes/MockPostsRepository.html":{},"coverage.html":{}}}],["src/commons/mocks/users.repository.mock.ts",{"_index":282,"title":{},"body":{"classes/MockUsersRepository.html":{},"coverage.html":{}}}],["src/commons/mocks/users.repository.mock.ts:6",{"_index":284,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["src/hashtags/hashtags.controller.ts",{"_index":205,"title":{},"body":{"controllers/HashtagsController.html":{},"coverage.html":{}}}],["src/hashtags/hashtags.controller.ts:15",{"_index":212,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["src/hashtags/hashtags.controller.ts:9",{"_index":209,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["src/hashtags/hashtags.module.ts",{"_index":226,"title":{},"body":{"modules/HashtagsModule.html":{}}}],["src/main.ts",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/posts.controller.ts",{"_index":363,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:24",{"_index":369,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:25",{"_index":367,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:26",{"_index":368,"title":{},"body":{"classes/PostCreateRequestBody.html":{}}}],["src/posts/posts.controller.ts:30",{"_index":404,"title":{},"body":{"classes/PostDetailsQueryParams.html":{}}}],["src/posts/posts.controller.ts:31",{"_index":405,"title":{},"body":{"classes/PostDetailsQueryParams.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:47",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:70",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:78",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:85",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.entity",{"_index":280,"title":{},"body":{"classes/MockPostsRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["src/posts/posts.entity.ts",{"_index":233,"title":{},"body":{"classes/Mention.html":{},"classes/PostEntity.html":{},"coverage.html":{}}}],["src/posts/posts.entity.ts:11",{"_index":410,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:15",{"_index":407,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:18",{"_index":412,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:21",{"_index":417,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:24",{"_index":409,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:27",{"_index":413,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:31",{"_index":415,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:35",{"_index":416,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.entity.ts:39",{"_index":235,"title":{},"body":{"classes/Mention.html":{}}}],["src/posts/posts.entity.ts:40",{"_index":234,"title":{},"body":{"classes/Mention.html":{}}}],["src/posts/posts.entity.ts:8",{"_index":419,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/posts/posts.module.mock.ts",{"_index":270,"title":{},"body":{"modules/MockPostsModule.html":{}}}],["src/posts/posts.module.ts",{"_index":442,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.repository.ts",{"_index":446,"title":{},"body":{"classes/PostsRepository.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts",{"_index":449,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:12",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:21",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:55",{"_index":464,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:70",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:78",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/user",{"_index":524,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserFollowingEntity.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":553,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:104",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:118",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:125",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":560,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:23",{"_index":559,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:24",{"_index":558,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:25",{"_index":556,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:26",{"_index":557,"title":{},"body":{"classes/UserCreateRequestBody.html":{}}}],["src/users/users.controller.ts:30",{"_index":644,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:31",{"_index":643,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:32",{"_index":641,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:33",{"_index":642,"title":{},"body":{"classes/UserUpdateRequestBody.html":{}}}],["src/users/users.controller.ts:42",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:90",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.entity",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{}}}],["src/users/users.entity.ts",{"_index":607,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/users/users.entity.ts:11",{"_index":615,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:14",{"_index":608,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:17",{"_index":609,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:20",{"_index":613,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:23",{"_index":611,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:26",{"_index":624,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:32",{"_index":621,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.entity.ts:8",{"_index":618,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/users.module.ts",{"_index":669,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.repository",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/users.repository.ts",{"_index":672,"title":{},"body":{"classes/UsersRepository.html":{},"coverage.html":{}}}],["src/users/users.service.ts",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:110",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:34",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:72",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":1067,"title":{},"body":{"license.html":{}}}],["standards",{"_index":1070,"title":{},"body":{"license.html":{}}}],["start",{"_index":828,"title":{},"body":{"index.html":{},"license.html":{}}}],["start:dev",{"_index":830,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":831,"title":{},"body":{"index.html":{}}}],["started",{"_index":775,"title":{"index.html":{},"license.html":{}},"body":{}}],["state",{"_index":1681,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1137,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1433,"title":{},"body":{"license.html":{}}}],["statements",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["stating",{"_index":1211,"title":{},"body":{"license.html":{}}}],["status",{"_index":1334,"title":{},"body":{"license.html":{}}}],["steps",{"_index":925,"title":{},"body":{"license.html":{}}}],["storage",{"_index":1251,"title":{},"body":{"license.html":{}}}],["string",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HashtagsController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["subdividing",{"_index":1492,"title":{},"body":{"license.html":{}}}],["subject",{"_index":1485,"title":{},"body":{"license.html":{}}}],["sublicenses",{"_index":1525,"title":{},"body":{"license.html":{}}}],["sublicensing",{"_index":1166,"title":{},"body":{"license.html":{}}}],["subprograms",{"_index":1121,"title":{},"body":{"license.html":{}}}],["subsection",{"_index":1288,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1339,"title":{},"body":{"license.html":{}}}],["substantially",{"_index":1490,"title":{},"body":{"license.html":{}}}],["such",{"_index":960,"title":{},"body":{"license.html":{}}}],["sue",{"_index":1539,"title":{},"body":{"license.html":{}}}],["suffice",{"_index":1349,"title":{},"body":{"license.html":{}}}],["supplement",{"_index":1383,"title":{},"body":{"license.html":{}}}],["support",{"_index":1219,"title":{},"body":{"license.html":{},"modules.html":{}}}],["supports",{"_index":1296,"title":{},"body":{"license.html":{}}}],["sure",{"_index":906,"title":{},"body":{"license.html":{}}}],["surrender",{"_index":1580,"title":{},"body":{"license.html":{}}}],["survive",{"_index":1432,"title":{},"body":{"license.html":{}}}],["sustained",{"_index":1652,"title":{},"body":{"license.html":{}}}],["svg",{"_index":1705,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":531,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["system",{"_index":1079,"title":{},"body":{"license.html":{}}}],["table",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":213,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["take",{"_index":895,"title":{},"body":{"license.html":{}}}],["tangible",{"_index":1318,"title":{},"body":{"license.html":{}}}],["technological",{"_index":1176,"title":{},"body":{"license.html":{}}}],["tells",{"_index":1049,"title":{},"body":{"license.html":{}}}],["term",{"_index":1135,"title":{},"body":{"license.html":{}}}],["terminate",{"_index":1441,"title":{},"body":{"license.html":{}}}],["terminated",{"_index":1465,"title":{},"body":{"license.html":{}}}],["terminates",{"_index":1451,"title":{},"body":{"license.html":{}}}],["termination",{"_index":1437,"title":{},"body":{"license.html":{}}}],["terms",{"_index":981,"title":{},"body":{"license.html":{}}}],["test",{"_index":287,"title":{},"body":{"classes/MockUsersRepository.html":{},"index.html":{}}}],["test:covsetup",{"_index":836,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":835,"title":{},"body":{"index.html":{}}}],["testdbmodule",{"_index":540,"title":{"modules/TestDbModule.html":{}},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules.html":{}}}],["testing",{"_index":536,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["tests",{"_index":833,"title":{},"body":{"index.html":{}}}],["text",{"_index":249,"title":{},"body":{"classes/Mention.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["therefore",{"_index":967,"title":{},"body":{"license.html":{}}}],["things",{"_index":920,"title":{},"body":{"license.html":{}}}],["third",{"_index":1202,"title":{},"body":{"license.html":{}}}],["this.appservice.gethello",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authorizetoken(context",{"_index":346,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["this.authservice.createnewsession",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["this.authservice.getuserfromsessiontoken(token",{"_index":342,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["this.getuserbyuserid(followeeid",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.matchpasshash(password",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passtohash(password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordrepo.findone",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordrepo.save(newpassword",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.postsrepository",{"_index":476,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete",{"_index":499,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(id",{"_index":494,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(originalpostid",{"_index":512,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone(replytopostid",{"_index":515,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":518,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost",{"_index":393,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.getallposts(query.authorid",{"_index":385,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.postsservice.getpost(postid",{"_index":389,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["this.sessionrepo.findone",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionrepo.save(session",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.token",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{}}}],["this.userfollowrepo.delete(follow.id",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userfollowrepo.findone",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userfollowrepo.save",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepo.findone",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepo.save(existinguser",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.createuser",{"_index":581,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.createuserfollowrelation",{"_index":598,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.deleteuserfollowrelation",{"_index":602,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.getuserbyuserid(userid",{"_index":578,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.getuserbyusername(username",{"_index":574,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["this.userservice.updateuser(userid",{"_index":592,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["those",{"_index":1108,"title":{},"body":{"license.html":{}}}],["though",{"_index":1386,"title":{},"body":{"license.html":{}}}],["three",{"_index":1275,"title":{},"body":{"license.html":{}}}],["through",{"_index":1035,"title":{},"body":{"license.html":{}}}],["throw",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["thus",{"_index":1157,"title":{},"body":{"license.html":{}}}],["time",{"_index":1462,"title":{},"body":{"license.html":{}}}],["todo",{"_index":217,"title":{},"body":{"controllers/HashtagsController.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["tokenauthorizer",{"_index":323,"title":{"classes/TokenAuthorizer.html":{}},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{},"coverage.html":{}}}],["tools",{"_index":1111,"title":{},"body":{"license.html":{}}}],["top",{"_index":221,"title":{},"body":{"controllers/HashtagsController.html":{}}}],["trade",{"_index":1417,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1416,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1418,"title":{},"body":{"license.html":{}}}],["transaction",{"_index":1355,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1036,"title":{},"body":{"license.html":{}}}],["transferred",{"_index":1357,"title":{},"body":{"license.html":{}}}],["transferring",{"_index":1488,"title":{},"body":{"license.html":{}}}],["transmission",{"_index":1307,"title":{},"body":{"license.html":{}}}],["treated",{"_index":1385,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":1183,"title":{},"body":{"license.html":{}}}],["true",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"guards/OptionalAuthGuard.html":{},"classes/PostEntity.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserEntity.html":{}}}],["try",{"_index":345,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["tutorials",{"_index":808,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":777,"title":{},"body":{"index.html":{}}}],["two",{"_index":924,"title":{},"body":{"license.html":{}}}],["type",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/Mention.html":{},"classes/MooBaseEntity.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockPostsRepository.html":{},"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/PostsRepository.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":444,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":671,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":526,"title":{},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{}}}],["typescript",{"_index":785,"title":{},"body":{"index.html":{}}}],["typical",{"_index":1332,"title":{},"body":{"license.html":{}}}],["ui",{"_index":799,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('invalid",{"_index":340,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('missing",{"_index":336,"title":{},"body":{"guards/OptionalAuthGuard.html":{},"guards/RequiredAuthGuard.html":{},"classes/TokenAuthorizer.html":{}}}],["unauthorizedexception('password",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('session",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('user",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":408,"title":{},"body":{"classes/PostEntity.html":{},"classes/UserEntity.html":{}}}],["under",{"_index":856,"title":{},"body":{"index.html":{},"license.html":{}}}],["unfolloweduser",{"_index":601,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["unfollowuser",{"_index":600,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["unfollowuser(follower",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":617,"title":{},"body":{"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["unique('following_pair",{"_index":637,"title":{},"body":{"classes/UserFollowingEntity.html":{}}}],["unit",{"_index":832,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unless",{"_index":1342,"title":{},"body":{"license.html":{}}}],["unliked",{"_index":403,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["unlikepost",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["unlikepost(@param('postid",{"_index":402,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{}}}],["unlikepost(postid",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["unlimited",{"_index":1141,"title":{},"body":{"license.html":{}}}],["unmodified",{"_index":1011,"title":{},"body":{"license.html":{}}}],["unnecessary",{"_index":1169,"title":{},"body":{"license.html":{}}}],["unpacking",{"_index":1381,"title":{},"body":{"license.html":{}}}],["until",{"_index":1449,"title":{},"body":{"license.html":{}}}],["update",{"_index":590,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":313,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["updatedat",{"_index":294,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["updatedatecolumn",{"_index":317,"title":{},"body":{"classes/MooBaseEntity.html":{}}}],["updatedatecolumn({name",{"_index":312,"title":{},"body":{"classes/MooBaseEntity.html":{},"classes/PasswordEntity.html":{},"classes/PostEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{}}}],["updates",{"_index":1368,"title":{},"body":{"license.html":{}}}],["updateuser",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(userid",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdetails",{"_index":584,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["updateuserdetails(authduser",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserrequest",{"_index":587,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["use",{"_index":916,"title":{},"body":{"license.html":{}}}],["used",{"_index":948,"title":{},"body":{"license.html":{}}}],["useful",{"_index":1687,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":373,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["useguards(requiredauthguard",{"_index":390,"title":{},"body":{"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"guards/OptionalAuthGuard.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RequiredAuthGuard.html":{},"classes/SessionsEntity.html":{},"classes/TokenAuthorizer.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["user.id",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username.length",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["usercreaterequestbody",{"_index":552,"title":{"classes/UserCreateRequestBody.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userentity",{"_index":114,"title":{"classes/UserEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Mention.html":{},"classes/MockUsersRepository.html":{},"classes/PasswordEntity.html":{},"classes/PostCreateRequestBody.html":{},"classes/PostDetailsQueryParams.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"modules/ProdDbModule.html":{},"classes/SessionsEntity.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userfollowingentity",{"_index":523,"title":{"classes/UserFollowingEntity.html":{}},"body":{"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserFollowingEntity.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userfollowrepo",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"classes/PasswordEntity.html":{},"classes/SessionsEntity.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userid'})@manytoone(undefined",{"_index":543,"title":{},"body":{"classes/SessionsEntity.html":{}}}],["userid'})@onetoone(undefined",{"_index":354,"title":{},"body":{"classes/PasswordEntity.html":{}}}],["username",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginRequestBody.html":{},"classes/LoginResponseBody.html":{},"classes/MockUsersRepository.html":{},"modules/ProdDbModule.html":{},"modules/TestDbModule.html":{},"classes/UserCreateRequestBody.html":{},"classes/UserEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userpassword",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["userpassword.password",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["userpassword.userid",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["userrepo",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["users",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{},"license.html":{}}}],["users.controller",{"_index":670,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.entity",{"_index":564,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserFollowingEntity.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["users.repository",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":566,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/@{username",{"_index":841,"title":{},"body":{"index.html":{}}}],["users/users.module",{"_index":24,"title":{},"body":{"modules/ApiModule.html":{}}}],["users/{userid",{"_index":842,"title":{},"body":{"index.html":{}}}],["users/{userid}/follow",{"_index":843,"title":{},"body":{"index.html":{}}}],["users/{userid}/followees",{"_index":845,"title":{},"body":{"index.html":{}}}],["users/{userid}/followers",{"_index":844,"title":{},"body":{"index.html":{}}}],["userscontroller",{"_index":570,"title":{"controllers/UsersController.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":571,"title":{},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/ApiModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":134,"title":{"classes/UsersRepository.html":{}},"body":{"injectables/AuthService.html":{},"classes/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usersservice",{"_index":565,"title":{"injectables/UsersService.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdaterequestbody",{"_index":567,"title":{"classes/UserUpdateRequestBody.html":{}},"body":{"classes/UserCreateRequestBody.html":{},"classes/UserUpdateRequestBody.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["uses",{"_index":1336,"title":{},"body":{"license.html":{}}}],["usevalue",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["using",{"_index":781,"title":{},"body":{"index.html":{},"license.html":{}}}],["uuid",{"_index":288,"title":{},"body":{"classes/MockUsersRepository.html":{}}}],["v3.0",{"_index":859,"title":{},"body":{"index.html":{}}}],["valid",{"_index":1274,"title":{},"body":{"license.html":{}}}],["value",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1710,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbatim",{"_index":877,"title":{},"body":{"license.html":{}}}],["verified",{"_index":299,"title":{},"body":{"classes/MockUsersRepository.html":{},"classes/UserEntity.html":{}}}],["version",{"_index":862,"title":{},"body":{"license.html":{}}}],["versions",{"_index":903,"title":{},"body":{"license.html":{}}}],["video",{"_index":817,"title":{},"body":{"index.html":{}}}],["view",{"_index":805,"title":{},"body":{"index.html":{},"license.html":{}}}],["violates",{"_index":1374,"title":{},"body":{"license.html":{}}}],["violation",{"_index":1445,"title":{},"body":{"license.html":{}}}],["visible",{"_index":1046,"title":{},"body":{"license.html":{}}}],["void",{"_index":1440,"title":{},"body":{"license.html":{}}}],["volume",{"_index":1250,"title":{},"body":{"license.html":{}}}],["waive",{"_index":1191,"title":{},"body":{"license.html":{}}}],["waiver",{"_index":1668,"title":{},"body":{"license.html":{}}}],["want",{"_index":915,"title":{},"body":{"license.html":{}}}],["warranties",{"_index":1051,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1050,"title":{},"body":{"license.html":{}}}],["watch",{"_index":814,"title":{},"body":{"index.html":{}}}],["way",{"_index":1237,"title":{},"body":{"license.html":{}}}],["ways",{"_index":1264,"title":{},"body":{"license.html":{}}}],["web",{"_index":1694,"title":{},"body":{"license.html":{}}}],["well",{"_index":1028,"title":{},"body":{"license.html":{}}}],["whatever",{"_index":1494,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1328,"title":{},"body":{"license.html":{}}}],["whole",{"_index":1083,"title":{},"body":{"license.html":{}}}],["whose",{"_index":1314,"title":{},"body":{"license.html":{}}}],["widely",{"_index":1077,"title":{},"body":{"license.html":{}}}],["widespread",{"_index":940,"title":{},"body":{"license.html":{}}}],["window",{"_index":1094,"title":{},"body":{"license.html":{}}}],["wipo",{"_index":1182,"title":{},"body":{"license.html":{}}}],["wish",{"_index":912,"title":{},"body":{"license.html":{}}}],["within",{"_index":1428,"title":{},"body":{"license.html":{}}}],["without",{"_index":958,"title":{},"body":{"license.html":{}}}],["work",{"_index":994,"title":{},"body":{"license.html":{}}}],["work's",{"_index":1109,"title":{},"body":{"license.html":{}}}],["working",{"_index":1078,"title":{},"body":{"license.html":{}}}],["works",{"_index":885,"title":{},"body":{"license.html":{}}}],["world",{"_index":63,"title":{},"body":{"injectables/AppService.html":{}}}],["worldwide",{"_index":1528,"title":{},"body":{"license.html":{}}}],["writing",{"_index":1625,"title":{},"body":{"license.html":{}}}],["written",{"_index":1273,"title":{},"body":{"license.html":{}}}],["wrong",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["years",{"_index":1276,"title":{},"body":{"license.html":{}}}],["yes",{"_index":462,"title":{},"body":{"injectables/PostsService.html":{}}}],["you'd",{"_index":804,"title":{},"body":{"index.html":{}}}],["yourself",{"_index":1545,"title":{},"body":{"license.html":{}}}],["youtube",{"_index":816,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/ApiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MockPostsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/ApiModule.html":{"url":"modules/ApiModule.html","title":"module - ApiModule","body":"\n                   \n\n\n\n\n    Modules\n    ApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nHashtagsModule\n\nHashtagsModule\n\nApiModule -->\n\nHashtagsModule->ApiModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nApiModule -->\n\nPostsModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HashtagsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { HashtagsModule } from './hashtags/hashtags.module';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, HashtagsModule, AuthModule],\n})\nexport class ApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/hello')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/hello')\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nApiModule\n\nApiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nProdDbModule\n\nProdDbModule\n\nAppModule -->\n\nProdDbModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ApiModule\n                        \n                        \n                            ProdDbModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ProdDbModule } from './commons/db.module';\nimport { ApiModule } from './api.module';\n\n@Module({\n  imports: [ApiModule, ProdDbModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: LoginRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({type: LoginResponseBody})@Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                LoginRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/users/users.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { PasswordEntity } from './passwords.entity';\nimport { SessionsEntity } from './sessions.entity';\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PasswordEntity,\n      SessionsEntity,\n      UserEntity,\n      PasswordEntity,\n    ]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                PASSWORD_SALT_ROUNDS\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewSession\n                            \n                            \n                                    Async\n                                createPasswordForNewUser\n                            \n                            \n                                    Async\n                                getUserFromSessionToken\n                            \n                            \n                                    Private\n                                    Async\n                                matchPassHash\n                            \n                            \n                                    Private\n                                    Async\n                                passToHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UsersRepository, passwordRepo: Repository, sessionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwordRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewSession\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewSession(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPasswordForNewUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPasswordForNewUser(userId: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSessionToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSessionToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        matchPassHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    matchPassHash(password: string, hash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        passToHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    passToHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        PASSWORD_SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { compare, hash } from 'bcrypt';\nimport { UserEntity } from 'src/users/users.entity';\nimport { UsersRepository } from 'src/users/users.repository';\nimport { Repository } from 'typeorm';\nimport { PasswordEntity } from './passwords.entity';\nimport { SessionsEntity } from './sessions.entity';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepo: UsersRepository,\n    @InjectRepository(PasswordEntity)\n    private passwordRepo: Repository,\n    @InjectRepository(SessionsEntity)\n    private sessionRepo: Repository,\n  ) {}\n\n  public static PASSWORD_SALT_ROUNDS = 10;\n\n  async createPasswordForNewUser(\n    userId: string,\n    password: string,\n  ): Promise {\n    const existing = await this.passwordRepo.findOne({ where: { userId } });\n    if (existing) {\n      throw new UnauthorizedException(\n        'This user already has a password, cannot set new password',\n      );\n    }\n\n    const newPassword = new PasswordEntity();\n    newPassword.userId = userId;\n    newPassword.password = await this.passToHash(password);\n    return await this.passwordRepo.save(newPassword);\n  }\n\n  async createNewSession(username: string, password: string) {\n    const user = await this.userRepo.findOne({ where: { username } });\n\n    if (!user) {\n      throw new NotFoundException('Username does not exist');\n    }\n    const userPassword = await this.passwordRepo.findOne({\n      where: { userId: user.id },\n    });\n    const passMatch = await this.matchPassHash(password, userPassword.password);\n    if (!passMatch) {\n      throw new UnauthorizedException('Password is wrong');\n    }\n    const session = new SessionsEntity();\n    session.userId = userPassword.userId;\n    const savedSession = await this.sessionRepo.save(session);\n    return savedSession;\n  }\n\n  async getUserFromSessionToken(token: string): Promise {\n    const session = await this.sessionRepo.findOne({ where: { id: token } });\n    if (!session) {\n      throw new UnauthorizedException('Session not found');\n    }\n    const user = await session.user;\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n    return user;\n  }\n\n  private async passToHash(password: string): Promise {\n    return hash(password, AuthService.PASSWORD_SALT_ROUNDS);\n  }\n\n  private async matchPassHash(\n    password: string,\n    hash: string,\n  ): Promise {\n    return (await compare(password, hash)) === true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HashtagsController.html":{"url":"controllers/HashtagsController.html","title":"controller - HashtagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HashtagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hashtags/hashtags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                hashtags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHashtags\n                            \n                            \n                                getPostsForHashtag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHashtags\n                        \n                    \n                \n            \n            \n                \ngetHashtags()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/hashtags/hashtags.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostsForHashtag\n                        \n                    \n                \n            \n            \n                \ngetPostsForHashtag(tag)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:tag/posts')\n                \n            \n\n            \n                \n                    Defined in src/hashtags/hashtags.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tag\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Param } from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('hashtags')\n@Controller('hashtags')\nexport class HashtagsController {\n  @Get('/')\n  getHashtags(): string {\n    // TODO: add actual logic\n    return 'all top hashtags';\n  }\n\n  @Get('/:tag/posts')\n  getPostsForHashtag(@Param('tag') tag): string {\n    // TODO: add actual logic\n    return `show all posts with hashtag ${tag}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HashtagsModule.html":{"url":"modules/HashtagsModule.html","title":"module - HashtagsModule","body":"\n                   \n\n\n\n\n    Modules\n    HashtagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hashtags/hashtags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HashtagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HashtagsController } from './hashtags.controller';\n\n@Module({\n  controllers: [HashtagsController],\n})\nexport class HashtagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginRequestBody.html":{"url":"classes/LoginRequestBody.html","title":"class - LoginRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginResponseBody.html":{"url":"classes/LoginResponseBody.html","title":"class - LoginResponseBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginResponseBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(token: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.controller.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.controller.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { ApiProperty, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\n\nclass LoginRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n}\n\nclass LoginResponseBody {\n  @ApiProperty() token: string;\n  constructor(token: string) {\n    this.token = token;\n  }\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiResponse({ type: LoginResponseBody })\n  @Post('/login')\n  async login(@Body() body: LoginRequestBody) {\n    const session = await this.authService.createNewSession(\n      body.username,\n      body.password,\n    );\n    return new LoginResponseBody(session.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mention.html":{"url":"classes/Mention.html","title":"class - Mention","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mention\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\n\n@Entity('posts')\nexport class PostEntity extends MooBaseEntity {\n  @Column({ length: 240, nullable: true })\n  text: string;\n\n  @Column('json', { default: [] })\n  images: Array;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'author_id' })\n  author: UserEntity;\n\n  @Column({ name: 'like_count', default: 0 })\n  likeCount: number;\n\n  @Column({ name: 'repost_count', default: 0 })\n  repostCount: number;\n\n  @Column('json', { default: [] })\n  hashtags: Array;\n\n  @Column('json', { default: [] })\n  mentions: Array;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'orig_post_id' })\n  origPost: PostEntity;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'reply_to_id' })\n  replyTo: PostEntity;\n}\n\nclass Mention {\n  name: string;\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MockPostsModule.html":{"url":"modules/MockPostsModule.html","title":"module - MockPostsModule","body":"\n                   \n\n\n\n\n    Modules\n    MockPostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MockPostsModule\n\n\n\ncluster_MockPostsModule_providers\n\n\n\ncluster_MockPostsModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nRequiredAuthGuard \n\nRequiredAuthGuard \n\n\n\nMockPostsModule\n\nMockPostsModule\n\nAuthService  -->\n\nMockPostsModule->AuthService \n\n\n\nRequiredAuthGuard  -->\n\nMockPostsModule->RequiredAuthGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nMockPostsModule -->\n\nAuthService->MockPostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.mock.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            RequiredAuthGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { AuthService } from 'src/auth/auth.service';\nimport {\n  MockUsersRepositoryProvider,\n  MockPostsRepositoryProvider,\n  MockPasswordRepositoryProvider,\n  MockSessionRepositoryProvider,\n} from 'src/commons/mocks/mock.providers';\n\n@Module({\n  providers: [\n    MockUsersRepositoryProvider,\n    MockPostsRepositoryProvider,\n    MockPasswordRepositoryProvider,\n    MockSessionRepositoryProvider,\n    RequiredAuthGuard,\n    AuthService,\n  ],\n  exports: [\n    MockUsersRepositoryProvider,\n    MockPostsRepositoryProvider,\n    MockPasswordRepositoryProvider,\n    MockSessionRepositoryProvider,\n    RequiredAuthGuard,\n    AuthService,\n  ],\n})\nexport class MockPostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockPostsRepository.html":{"url":"classes/MockPostsRepository.html","title":"class - MockPostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockPostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/mocks/posts.repository.mock.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PostEntity } from 'src/posts/posts.entity';\nimport { Repository } from 'typeorm';\n\nexport class MockPostsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockUsersRepository.html":{"url":"classes/MockUsersRepository.html","title":"class - MockUsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockUsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/mocks/users.repository.mock.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne()\n                \n            \n\n\n            \n                \n                    Defined in src/commons/mocks/users.repository.mock.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PasswordEntity } from 'src/auth/passwords.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Repository } from 'typeorm';\n\nexport class MockUsersRepository extends Repository {\n  async findOne() {\n    const mockUser: UserEntity = {\n      id: 'test-uuid',\n      name: 'John Doe',\n      followeeCount: 1,\n      followerCount: 1,\n      updatedAt: new Date('2020-01-01'),\n      createdAt: new Date('2020-01-01'),\n      username: 'johndoe',\n      verified: true,\n      userPassword: new PasswordEntity(),\n    };\n    return mockUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MooBaseEntity.html":{"url":"classes/MooBaseEntity.html","title":"class - MooBaseEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MooBaseEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commons/base.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Base entity which is extended by all entities in our application.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/commons/base.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Base entity which is extended by all entities in our application.\n */\nexport abstract class MooBaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/OptionalAuthGuard.html":{"url":"guards/OptionalAuthGuard.html","title":"guard - OptionalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    OptionalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            TokenAuthorizer\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PasswordEntity.html":{"url":"classes/PasswordEntity.html","title":"class - PasswordEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PasswordEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passwords.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        MooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'userId'})@OneToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/passwords.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\n@Entity('passwords')\nexport class PasswordEntity extends MooBaseEntity {\n  @Column()\n  userId: string;\n\n  @JoinColumn({ name: 'userId' })\n  @OneToOne(() => UserEntity)\n  user: UserEntity;\n\n  @Column({ nullable: false })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostCreateRequestBody.html":{"url":"classes/PostCreateRequestBody.html","title":"class - PostCreateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostCreateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                originalPostId\n                            \n                            \n                                replyToPostId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        originalPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replyToPostId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid')\n  async deletePost(@Param('postid') postid: string): Promise {\n    // TODO\n    return `delete postid = ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string): Promise {\n    return `liked post ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string): Promise {\n    return `unliked post ${postid}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostDetailsQueryParams.html":{"url":"classes/PostDetailsQueryParams.html","title":"class - PostDetailsQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostDetailsQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                hashtags\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashtags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.controller.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid')\n  async deletePost(@Param('postid') postid: string): Promise {\n    // TODO\n    return `delete postid = ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string): Promise {\n    return `liked post ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string): Promise {\n    return `unliked post ${postid}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        MooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                hashtags\n                            \n                            \n                                images\n                            \n                            \n                                likeCount\n                            \n                            \n                                mentions\n                            \n                            \n                                origPost\n                            \n                            \n                                replyTo\n                            \n                            \n                                repostCount\n                            \n                            \n                                text\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)@JoinColumn({name: 'author_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashtags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        likeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'like_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mentions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        origPost\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'orig_post_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replyTo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn({name: 'reply_to_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        repostCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'repost_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 240, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne, OneToOne } from 'typeorm';\n\n@Entity('posts')\nexport class PostEntity extends MooBaseEntity {\n  @Column({ length: 240, nullable: true })\n  text: string;\n\n  @Column('json', { default: [] })\n  images: Array;\n\n  @ManyToOne(() => UserEntity)\n  @JoinColumn({ name: 'author_id' })\n  author: UserEntity;\n\n  @Column({ name: 'like_count', default: 0 })\n  likeCount: number;\n\n  @Column({ name: 'repost_count', default: 0 })\n  repostCount: number;\n\n  @Column('json', { default: [] })\n  hashtags: Array;\n\n  @Column('json', { default: [] })\n  mentions: Array;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'orig_post_id' })\n  origPost: PostEntity;\n\n  @OneToOne(() => PostEntity)\n  @JoinColumn({ name: 'reply_to_id' })\n  replyTo: PostEntity;\n}\n\nclass Mention {\n  name: string;\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostDetails\n                            \n                            \n                                    Async\n                                likePost\n                            \n                            \n                                    Async\n                                unlikePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewPost(author: UserEntity, post: PostCreateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Post('/')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    author\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                PostCreateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(postid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:postid')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(query: PostDetailsQueryParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                PostDetailsQueryParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostDetails(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:postId')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        likePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    likePost(postid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:postid/like')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unlikePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    unlikePost(postid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:postid/like')\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\nclass PostCreateRequestBody {\n  @ApiProperty() text: string;\n  @ApiPropertyOptional() originalPostId: string;\n  @ApiPropertyOptional() replyToPostId: string;\n}\n\nclass PostDetailsQueryParams {\n  @ApiPropertyOptional() authorId: string;\n  @ApiPropertyOptional() hashtags: string[];\n}\n\n@ApiTags('posts')\n@Controller('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/')\n  async getAllPosts(\n    @Query() query: PostDetailsQueryParams,\n  ): Promise {\n    return await this.postsService.getAllPosts(query.authorId);\n  }\n\n  @Get('/:postId')\n  async getPostDetails(@Param('postId') postId: string): Promise {\n    return await this.postsService.getPost(postId);\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Post('/')\n  async createNewPost(\n    @User() author: UserEntity,\n    @Body() post: PostCreateRequestBody,\n  ): Promise {\n    const createdPost = await this.postsService.createPost(\n      post,\n      author,\n      post.originalPostId,\n      post.replyToPostId,\n    );\n    return createdPost;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid')\n  async deletePost(@Param('postid') postid: string): Promise {\n    // TODO\n    return `delete postid = ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:postid/like')\n  async likePost(@Param('postid') postid: string): Promise {\n    return `liked post ${postid}`;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:postid/like')\n  async unlikePost(@Param('postid') postid: string): Promise {\n    return `unliked post ${postid}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsService\n\nPostsService\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostsController } from './posts.controller';\nimport { PostEntity } from './posts.entity';\nimport { PostsService } from './posts.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PostEntity])],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsRepository.html":{"url":"classes/PostsRepository.html","title":"class - PostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { PostEntity } from './posts.entity';\n\n@EntityRepository(PostEntity)\nexport class PostsRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: PostsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        PostsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: Partial, author: UserEntity, originalPostId: string, replyToPostId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    originalPostId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    replyToPostId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(authorId?: string, hashtags?: string[] | null)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    hashtags\n                                    \n                                            string[] | null\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UserEntity } from 'src/users/users.entity';\nimport { PostEntity } from './posts.entity';\nimport { PostsRepository } from './posts.repository';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    @InjectRepository(PostEntity)\n    private postsRepository: PostsRepository,\n  ) {}\n\n  /**\n   * @description find all posts\n   */\n  async getAllPosts(\n    authorId?: string,\n    hashtags?: string[] | null,\n  ): Promise> {\n    // TODO: implementation pagination (size + limit)\n    // TODO: implement filter by hashtag\n    const queryBuilder = this.postsRepository\n      .createQueryBuilder('posts')\n      .leftJoinAndSelect('posts.author', 'author')\n      .leftJoinAndSelect('posts.origPost', 'origPost')\n      .addSelect('origPost.author')\n      .leftJoinAndSelect('origPost.author', 'origPostAuthor')\n      .leftJoinAndSelect('posts.replyTo', 'replyTo')\n      .addSelect('replyTo.author')\n      .leftJoinAndSelect('replyTo.author', 'replyToAuthor');\n\n    if (authorId) {\n      queryBuilder.where(`posts.author = :authorId`, { authorId });\n    }\n\n    if (hashtags && hashtags.length > 0) {\n      // TODO\n    }\n\n    return queryBuilder\n      .addSelect('posts.created_at')\n      .orderBy('posts.created_at', 'DESC')\n      .limit(100)\n      .getMany();\n  }\n\n  /**\n   * @description find post by id\n   */\n  async getPost(id: string): Promise {\n    return this.postsRepository.findOne(id, {\n      relations: [\n        'author',\n        'origPost',\n        'origPost.author',\n        'replyTo',\n        'replyTo.author',\n      ],\n    });\n  }\n\n  /**\n   * @description delete post by id\n   */\n  async deletePost(id: string): Promise {\n    const deleteResult = await this.postsRepository.delete({ id });\n    return deleteResult.affected === 1;\n  }\n\n  /**\n   * @description create post\n   */\n  async createPost(\n    post: Partial,\n    author: UserEntity,\n    originalPostId: string,\n    replyToPostId: string,\n  ): Promise {\n    // TODO: detect #hashtags in the post and create hashtag entities for them\n    // TODO: deletect @user mentions in the post\n    if (!post.text && !originalPostId) {\n      throw new BadRequestException('Post must contain text or be a repost');\n    }\n\n    if (originalPostId && replyToPostId) {\n      throw new BadRequestException('Post can either be a reply or a repost');\n    }\n\n    const newPost = new PostEntity();\n    newPost.text = post.text;\n    newPost.author = author;\n\n    if (originalPostId) {\n      const origPost = await this.postsRepository.findOne(originalPostId);\n      if (!origPost) {\n        throw new NotFoundException('Original post not found');\n      }\n      newPost.origPost = origPost;\n    }\n\n    if (replyToPostId) {\n      const replyTo = await this.postsRepository.findOne(replyToPostId);\n      if (!replyTo) {\n        throw new NotFoundException('Original post not found');\n      }\n      newPost.replyTo = replyTo;\n    }\n\n    const savedPost = await this.postsRepository.save(newPost);\n    return savedPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProdDbModule.html":{"url":"modules/ProdDbModule.html","title":"module - ProdDbModule","body":"\n                   \n\n\n\n\n    Modules\n    ProdDbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commons/db.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Database module for production\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { SessionsEntity } from 'src/auth/sessions.entity';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserFollowingEntity } from 'src/users/user-followings.entity';\nimport { UserEntity } from 'src/users/users.entity';\n\n/**\n * Database module for production\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      username: 'mooadmin',\n      password: 'moopass',\n      database: 'moodb',\n      synchronize: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n      ],\n    }),\n  ],\n})\nexport class ProdDbModule {}\n\n/**\n * Database module for testing purposes\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      username: 'mooadmin',\n      password: 'moopass',\n      database: 'moodb_test',\n      synchronize: true,\n      dropSchema: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n      ],\n    }),\n  ],\n})\nexport class TestDbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RequiredAuthGuard.html":{"url":"guards/RequiredAuthGuard.html","title":"guard - RequiredAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RequiredAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            TokenAuthorizer\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SessionsEntity.html":{"url":"classes/SessionsEntity.html","title":"class - SessionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SessionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/sessions.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        MooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'userId'})@ManyToOne(undefined, {lazy: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/sessions.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from 'src/users/users.entity';\nimport { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';\n\n@Entity('sessions')\nexport class SessionsEntity extends MooBaseEntity {\n  @Column()\n  userId: string;\n\n  @JoinColumn({ name: 'userId' })\n  @ManyToOne(() => UserEntity, { lazy: true })\n  user: Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TestDbModule.html":{"url":"modules/TestDbModule.html","title":"module - TestDbModule","body":"\n                   \n\n\n\n\n    Modules\n    TestDbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commons/db.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Database module for testing purposes\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { SessionsEntity } from 'src/auth/sessions.entity';\nimport { PostEntity } from 'src/posts/posts.entity';\nimport { UserFollowingEntity } from 'src/users/user-followings.entity';\nimport { UserEntity } from 'src/users/users.entity';\n\n/**\n * Database module for production\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      username: 'mooadmin',\n      password: 'moopass',\n      database: 'moodb',\n      synchronize: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n      ],\n    }),\n  ],\n})\nexport class ProdDbModule {}\n\n/**\n * Database module for testing purposes\n */\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      username: 'mooadmin',\n      password: 'moopass',\n      database: 'moodb_test',\n      synchronize: true,\n      dropSchema: true,\n      logger: 'advanced-console',\n      logging: 'all',\n      entities: [\n        UserEntity,\n        PostEntity,\n        PasswordEntity,\n        SessionsEntity,\n        UserFollowingEntity,\n      ],\n    }),\n  ],\n})\nexport class TestDbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenAuthorizer.html":{"url":"classes/TokenAuthorizer.html","title":"class - TokenAuthorizer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenAuthorizer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                authorizeToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        authorizeToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    authorizeToken(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\nclass TokenAuthorizer {\n  constructor(@Inject(AuthService) private readonly authService: AuthService) {}\n  protected async authorizeToken(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    if (!request?.headers?.authorization) {\n      throw new UnauthorizedException('Missing authorization header');\n    }\n    if (!request.headers.authorization.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Invalid authorization header');\n    }\n    const token = request.headers.authorization.split(' ')[1];\n    if (!token) {\n      throw new UnauthorizedException('Missing token');\n    }\n    const user = this.authService.getUserFromSessionToken(token);\n    request.user = user;\n    return true;\n  }\n}\n\n@Injectable()\nexport class OptionalAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      return await this.authorizeToken(context);\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\n@Injectable()\nexport class RequiredAuthGuard extends TokenAuthorizer implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise {\n    return this.authorizeToken(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCreateRequestBody.html":{"url":"classes/UserCreateRequestBody.html","title":"class - UserCreateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCreateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        MooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                followeeCount\n                            \n                            \n                                followerCount\n                            \n                            \n                                name\n                            \n                            \n                                username\n                            \n                            \n                                userPassword\n                            \n                            \n                                verified\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 240})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followeeCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'followee_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followerCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'follower_count', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 30, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PasswordEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, undefined, {lazy: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PasswordEntity } from 'src/auth/passwords.entity';\nimport { MooBaseEntity } from 'src/commons/base.entity';\nimport { Column, Entity, OneToOne } from 'typeorm';\n\n@Entity('users')\nexport class UserEntity extends MooBaseEntity {\n  @Column({ length: 30, nullable: false, unique: true })\n  username: string;\n\n  @Column({ nullable: true, length: 50 })\n  name: string;\n\n  @Column({ nullable: true })\n  avatar?: string;\n\n  @Column({ nullable: true, length: 240 })\n  bio?: string;\n\n  @Column({ name: 'follower_count', default: 0 })\n  followerCount: number;\n\n  @Column({ name: 'followee_count', default: 0 })\n  followeeCount: number;\n\n  @Column('boolean', { default: false })\n  verified: boolean;\n\n  @OneToOne((type) => PasswordEntity, (password) => password.user, {\n    lazy: true,\n    cascade: true,\n  })\n  userPassword: PasswordEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserFollowingEntity.html":{"url":"classes/UserFollowingEntity.html","title":"class - UserFollowingEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserFollowingEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user-followings.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        MooBaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                followee\n                            \n                            \n                                follower\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        followee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'followee_id'})@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user-followings.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        follower\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn({name: 'follower_id'})@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user-followings.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:12\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         MooBaseEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         MooBaseEntity:18\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Entity, JoinColumn, ManyToOne, Unique } from 'typeorm';\nimport { MooBaseEntity } from 'src/commons/base.entity';\nimport { UserEntity } from './users.entity';\n\n// there can be only 1 row of same follower+followee\n@Unique('following_pair', ['follower', 'followee'])\n@Entity('user_followings')\nexport class UserFollowingEntity extends MooBaseEntity {\n  @JoinColumn({ name: 'follower_id' })\n  @ManyToOne(() => UserEntity)\n  follower: UserEntity;\n\n  @JoinColumn({ name: 'followee_id' })\n  @ManyToOne(() => UserEntity)\n  followee: UserEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserUpdateRequestBody.html":{"url":"classes/UserUpdateRequestBody.html","title":"class - UserUpdateRequestBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserUpdateRequestBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.controller.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNewUser\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFolloweesOfUser\n                            \n                            \n                                    Async\n                                getFollowersOfUser\n                            \n                            \n                                    Async\n                                getUserByUserid\n                            \n                            \n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                updateUserDetails\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createNewUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createNewUser(createUserRequest: UserCreateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserRequest\n                                    \n                                                UserCreateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(follower: UserEntity, followeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:userid/follow')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFolloweesOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFolloweesOfUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Put('/:userid/followees')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowersOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowersOfUser()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Get('/:userid/followers')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUserid\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUserid(userid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userid')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/@:username')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(follower: UserEntity, followeeId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Delete('/:userid/follow')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserDetails\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserDetails(authdUser: UserEntity, userid: string, updateUserRequest: UserUpdateRequestBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(RequiredAuthGuard)@Patch('/:userid')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authdUser\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserRequest\n                                    \n                                                UserUpdateRequestBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Delete,\n  ForbiddenException,\n  NotFoundException,\n  UseGuards,\n} from '@nestjs/common';\nimport { Controller, Get, Param, Patch, Post, Put } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiParam,\n  ApiProperty,\n  ApiPropertyOptional,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { User } from 'src/auth/auth.decorator';\nimport { RequiredAuthGuard } from 'src/auth/auth.guard';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\nclass UserCreateRequestBody {\n  @ApiProperty() username: string;\n  @ApiProperty() password: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\nclass UserUpdateRequestBody {\n  @ApiPropertyOptional() password?: string;\n  @ApiPropertyOptional() name?: string;\n  @ApiPropertyOptional() avatar?: string;\n  @ApiPropertyOptional() bio?: string;\n}\n\n@ApiTags('users')\n@Controller('users')\nexport class UsersController {\n  constructor(private userService: UsersService) {}\n\n  @Get('/@:username')\n  async getUserByUsername(@Param('username') username: string): Promise {\n    const user = await this.userService.getUserByUsername(username);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n    return user;\n  }\n\n  @Get('/:userid')\n  async getUserByUserid(@Param('userid') userid: string): Promise {\n    const user = await this.userService.getUserByUserId(userid);\n\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    return user;\n  }\n\n  @Post('/')\n  async createNewUser(\n    @Body() createUserRequest: UserCreateRequestBody,\n  ): Promise {\n    const user = await this.userService.createUser(\n      createUserRequest,\n      createUserRequest.password,\n    );\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Patch('/:userid')\n  async updateUserDetails(\n    @User() authdUser: UserEntity,\n    @Param('userid') userid: string,\n    @Body() updateUserRequest: UserUpdateRequestBody,\n  ): Promise {\n    if (authdUser.id !== userid) {\n      throw new ForbiddenException('You can only update your own user details');\n    }\n    const user = await this.userService.updateUser(userid, updateUserRequest);\n    return user;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/follow')\n  async followUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const followedUser = await this.userService.createUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return followedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Delete('/:userid/follow')\n  async unfollowUser(\n    @User() follower: UserEntity,\n    @Param('userid') followeeId: string,\n  ): Promise {\n    const unfollowedUser = await this.userService.deleteUserFollowRelation(\n      follower,\n      followeeId,\n    );\n    return unfollowedUser;\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Get('/:userid/followers')\n  async getFollowersOfUser(): Promise {\n    return [];\n  }\n\n  @ApiBearerAuth()\n  @UseGuards(RequiredAuthGuard)\n  @Put('/:userid/followees')\n  async getFolloweesOfUser(): Promise {\n    return [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService\n\nUsersService\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PasswordEntity } from 'src/auth/passwords.entity';\nimport { UserFollowingEntity } from './user-followings.entity';\nimport { UsersController } from './users.controller';\nimport { UserEntity } from './users.entity';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity, PasswordEntity, UserFollowingEntity]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersRepository.html":{"url":"classes/UsersRepository.html","title":"class - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { UserEntity } from './users.entity';\n\n@EntityRepository(UserEntity)\nexport class UsersRepository extends Repository {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                createUserFollowRelation\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUserFollowRelation\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByUserId\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByUsername\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: UsersRepository, authService: AuthService, userFollowRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userFollowRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUserFollowRelation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserFollowRelation(follower: UserEntity, followeeId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:92\n                \n            \n\n\n            \n                \n                    create a user-user follow pairing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deleteUserFollowRelation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserFollowRelation(follower: UserEntity, followeeId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:110\n                \n            \n\n\n            \n                \n                    delete a user-user follow pairing\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    follower\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    followeeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUserId(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getUserByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if found\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: string, newUserDetails: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newUserDetails\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        user if updated\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { UserFollowingEntity } from './user-followings.entity';\nimport { UserEntity } from './users.entity';\nimport { UsersRepository } from './users.repository';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity) private userRepo: UsersRepository,\n    private authService: AuthService,\n    @InjectRepository(UserFollowingEntity)\n    private userFollowRepo: Repository,\n  ) {}\n  /**\n   * @description find a user with a given username\n   * @returns {Promise} user if found\n   */\n  public async getUserByUsername(username: string): Promise {\n    return await this.userRepo.findOne({ where: { username } });\n  }\n\n  /**\n   * @description find a user with a given userid\n   * @returns {Promise} user if found\n   */\n  public async getUserByUserId(userId: string): Promise {\n    return await this.userRepo.findOne({ where: { id: userId } });\n  }\n\n  /**\n   * @description create new user with given details\n   * @returns {Promise} user if created\n   */\n  public async createUser(\n    user: Partial,\n    password: string,\n  ): Promise {\n    if (user.username.length } user if updated\n   */\n  public async updateUser(\n    userId: string,\n    newUserDetails: Partial,\n  ): Promise {\n    const existingUser = await this.userRepo.findOne({\n      where: { id: userId },\n    });\n    if (!existingUser) {\n      return null;\n    }\n    if (newUserDetails.bio) existingUser.bio = newUserDetails.bio;\n    if (newUserDetails.avatar) existingUser.avatar = newUserDetails.avatar;\n    if (newUserDetails.name) existingUser.name = newUserDetails.name;\n\n    return await this.userRepo.save(existingUser);\n  }\n\n  /**\n   * create a user-user follow pairing\n   */\n  public async createUserFollowRelation(\n    follower: UserEntity,\n    followeeId: string,\n  ) {\n    const followee = await this.getUserByUserId(followeeId);\n    if (!followee) {\n      throw new NotFoundException('User not found');\n    }\n    const newFollow = await this.userFollowRepo.save({\n      follower,\n      followee,\n    });\n    return newFollow.followee;\n  }\n\n  /**\n   * delete a user-user follow pairing\n   */\n  public async deleteUserFollowRelation(\n    follower: UserEntity,\n    followeeId: string,\n  ) {\n    const followee = await this.getUserByUserId(followeeId);\n    if (!followee) {\n      throw new NotFoundException('User not found');\n    }\n    const follow = await this.userFollowRepo.findOne({\n      where: { follower, followee },\n    });\n    if (follow) {\n      await this.userFollowRepo.delete(follow.id);\n      // TODO: future: show show that I do not follow them anymore in the response\n      return followee;\n    } else {\n      throw new NotFoundException('No follow relationship found');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginRequestBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            class\n            LoginResponseBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            class\n            TokenAuthorizer\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            OptionalAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            guard\n            RequiredAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/passwords.entity.ts\n            \n            class\n            PasswordEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/sessions.entity.ts\n            \n            class\n            SessionsEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/commons/base.entity.ts\n            \n            class\n            MooBaseEntity\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockPasswordRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockPostsRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockSessionRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockUserFollowingsRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/mock.providers.ts\n            \n            variable\n            MockUsersRepositoryProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/posts.repository.mock.ts\n            \n            class\n            MockPostsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/commons/mocks/users.repository.mock.ts\n            \n            class\n            MockUsersRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/hashtags/hashtags.controller.ts\n            \n            controller\n            HashtagsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            class\n            PostCreateRequestBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            class\n            PostDetailsQueryParams\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            class\n            Mention\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/posts.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/posts/posts.repository.ts\n            \n            class\n            PostsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/user-followings.entity.ts\n            \n            class\n            UserFollowingEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            class\n            UserCreateRequestBody\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            class\n            UserUpdateRequestBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.repository.ts\n            \n            class\n            UsersRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                25 %\n                (2/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.2.3\n        \n            @nestjs/core : ^8.2.3\n        \n            @nestjs/platform-fastify : ^8.2.3\n        \n            @nestjs/swagger : ^5.1.5\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            fastify-compress : ^3.6.0\n        \n            fastify-swagger : ^4.8.0\n        \n            pg : ^8.6.0\n        \n            pg-hstore : ^2.3.4\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.4.0\n        \n            typeorm : ^0.2.34\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMoo - A Twitter Clone\nBackend API for Moo using Nest framework (NodeJS + TypeScript + PostgreSQL)\n\n\n\nAbout\nIdea\nMoo is a parody of Twitter. Further information about features and DB schema requirements can be found on this discussion board :\nhttps://github.com/scaleracademy/open-source-projects/discussions/81\nUI Design\nThe UI is being designed on Figma if you'd like to view\n\nFigma UI Prototype\nFigma Discussion Jam Board\n\nTutorials\nIf you'd like to see how the initial project was built please watch the following YouTube video\n\n\n\n▶️ Building Twitter Clone from Scratch | End-to-End Coding Project\n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSetup Database\ncreate database moodb;\ncreate user mooadmin with password 'moopass';\ngrant all privileges on database moodb to mooadmin;Progress\n\nauth\n\n POST /auth/login\n\n\nusers\n\n GET /users 📃\n GET /users/@{username}\n GET /users/{userid}\n POST /users\n PATCH /users/{userid} 🔒\n PUT /users/{userid}/follow 🔒\n DELETE /users/{userid}/follow 🔒\n GET /users/{userid}/followers 📃\n GET /users/{userid}/followees 📃\n\n\nposts\n\n GET /posts 📃\n filter by author\n filter by replyTo\n filter by origPosts\n full-text-search on post content\n\n\n GET /posts/{postid}\n POST /posts 🔒\n simple posts\n reply to a post\n repost / quote post\n #hashtags\n @mentions\n\n\n DELETE /posts/{postid} 🔒\n PUT /posts/{postid}/like 🔒\n DELETE /posts/{postid}/like 🔒\n\n\nhashtags\n\n GET /hashtags 📃\n GET /hashtags/{tag}/posts 📃\n\n\n\nLicense\nThis project is under the GNU AGPL v3.0 license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nGNU Affero General Public License\nVersion 3, 19 November 2007\nCopyright © 2007 Free Software Foundation, Inc. http://fsf.org/>\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\nPreamble\nThe GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\nDevelopers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\nA secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\nThe GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\nAn older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\nThe precise terms and conditions for copying, distribution and\nmodification follow.\nTERMS AND CONDITIONS\n0. Definitions\n“This License” refers to version 3 of the GNU Affero General Public License.\n“Copyright” also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n“The Program” refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as “you”.  “Licensees” and\n“recipients” may be individuals or organizations.\nTo “modify” a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a “modified version” of the\nearlier work or a work “based on” the earlier work.\nA “covered work” means either the unmodified Program or a work based\non the Program.\nTo “propagate” a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\nTo “convey” a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays “Appropriate Legal Notices”\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n1. Source Code\nThe “source code” for a work means the preferred form of the work\nfor making modifications to it.  “Object code” means any non-source\nform of a work.\nA “Standard Interface” means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\nThe “System Libraries” of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n“Major Component”, in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\nThe “Corresponding Source” for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\nThe Corresponding Source for a work in source code form is that\nsame work.\n2. Basic Permissions\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n3. Protecting Users' Legal Rights From Anti-Circumvention Law\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n4. Conveying Verbatim Copies\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n5. Conveying Modified Source Versions\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section 7.\nThis requirement modifies the requirement in section 4 to\n“keep intact all notices”.\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n“aggregate” if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n6. Conveying Non-Source Forms\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\nA “User Product” is either (1) a “consumer product”, which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, “normally used” refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n“Installation Information” for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n7. Additional Terms\n“Additional permissions” are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\nAll other non-permissive additional terms are considered “further\nrestrictions” within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n8. Termination\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n9. Acceptance Not Required for Having Copies\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n10. Automatic Licensing of Downstream Recipients\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\nAn “entity transaction” is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n11. Patents\nA “contributor” is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's “contributor version”.\nA contributor's “essential patent claims” are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, “control” includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\nIn the following three paragraphs, a “patent license” is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To “grant” such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  “Knowingly relying” means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\nA patent license is “discriminatory” if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n12. No Surrender of Others' Freedom\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n13. Remote Network Interaction; Use with the GNU General Public License\nNotwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n14. Revised Versions of this License\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License “or any later version” applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n15. Disclaimer of Warranty\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n16. Limitation of Liability\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n17. Interpretation of Sections 15 and 16\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\nEND OF TERMS AND CONDITIONS\nHow to Apply These Terms to Your New Programs\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe “copyright” line and a pointer to where the full notice is found.\n\nCopyright (C)   \n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see .Also add information on how to contact you by electronic and paper mail.\nIf your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a “Source” link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a “copyright disclaimer” for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\nhttp://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HashtagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MockPostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProdDbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TestDbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ApiModule\n\n\n\ncluster_ApiModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MockPostsModule\n\n\n\ncluster_MockPostsModule_exports\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nApiModule\n\nApiModule\n\nApiModule -->\n\nAuthModule->ApiModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashtagsModule\n\nHashtagsModule\n\nApiModule -->\n\nHashtagsModule->ApiModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nApiModule -->\n\nPostsModule->ApiModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nApiModule -->\n\nUsersModule->ApiModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nApiModule->AppModule\n\n\n\n\n\nProdDbModule\n\nProdDbModule\n\nAppModule -->\n\nProdDbModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMockPostsModule\n\nMockPostsModule\n\nMockPostsModule -->\n\nAuthService->MockPostsModule\n\n\n\n\n\nRequiredAuthGuard \n\nRequiredAuthGuard \n\nAuthService  -->\n\nMockPostsModule->AuthService \n\n\n\nRequiredAuthGuard  -->\n\nMockPostsModule->RequiredAuthGuard \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockPasswordRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockPostsRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockSessionRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockUserFollowingsRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            MockUsersRepositoryProvider   (src/.../mock.providers.ts)\n                        \n                        \n                            User   (src/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/commons/mocks/mock.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MockPasswordRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(PasswordEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockPostsRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(PostEntity),\n  useValue: new MockPostsRepository(),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockSessionRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(SessionsEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockUserFollowingsRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(UserFollowingEntity),\n  useValue: {},\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MockUsersRepositoryProvider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: getRepositoryToken(UserEntity),\n  useValue: new MockUsersRepository(),\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): UserEntity => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
